/* The following code was generated by JFlex 1.4.3 on 5/5/15 5:44 PM */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/5/15 5:44 PM from the specification file
 * <tt>/Users/Darkyen/IntelliJProjects/GLSL4Idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\0\1\7\1\5\22\0\1\7\1\101\1\0"+
    "\1\57\1\0\1\72\1\75\1\0\1\66\1\67\1\23\1\71\1\105"+
    "\1\21\1\17\1\22\1\11\1\60\1\51\1\54\1\37\3\2\2\1"+
    "\1\103\1\104\1\73\1\70\1\74\1\102\1\0\1\3\1\3\1\45"+
    "\1\52\1\20\1\16\5\4\1\15\6\4\1\46\1\4\1\10\2\4"+
    "\1\12\2\4\1\64\1\56\1\65\1\76\1\4\1\0\1\30\1\34"+
    "\1\36\1\27\1\35\1\14\1\55\1\47\1\26\1\4\1\61\1\13"+
    "\1\40\1\33\1\25\1\43\1\4\1\44\1\42\1\31\1\32\1\24"+
    "\1\50\1\41\1\53\1\4\1\62\1\77\1\63\1\100\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\2\3\1\5"+
    "\1\6\1\7\1\10\21\3\1\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\36\1\4\7\3\1\1\1\37\1\0"+
    "\1\40\1\0\3\40\2\2\5\3\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\4\3\1\47\1\3\1\50\1\3"+
    "\1\51\34\3\2\4\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\2\3\1\71\7\3\1\72\1\73\1\40"+
    "\4\3\1\74\1\3\1\0\4\3\1\75\3\3\1\76"+
    "\41\3\1\77\1\100\14\3\1\101\2\3\1\102\1\44"+
    "\1\3\1\103\1\3\1\104\1\105\1\106\10\3\1\107"+
    "\1\3\1\110\3\3\1\111\2\3\1\112\4\3\1\113"+
    "\1\114\1\115\15\3\1\116\5\3\1\117\1\120\5\3"+
    "\1\121\2\3\1\122\1\123\1\124\1\3\1\125\1\126"+
    "\1\127\1\130\2\3\1\131\1\132\1\133\1\3\1\134"+
    "\1\135\1\136\2\3\1\137\1\140\1\141\1\3\1\142"+
    "\1\3\1\143\13\3\1\144\5\3\1\145\1\3\1\146"+
    "\2\3\1\147\1\150\1\3\1\151\1\3\1\152\3\3"+
    "\1\153\7\3\1\154\3\3\1\155\1\156\1\157\1\160"+
    "\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\3"+
    "\1\170\1\171\2\3\1\172\3\3\1\173\1\174\1\3"+
    "\1\175\1\3\1\176\1\3\1\177\1\200\1\201\1\202"+
    "\1\203\1\204\1\205\1\206\1\207\1\210\1\3\1\211"+
    "\7\3\1\212\3\3\1\213\1\214\1\3\1\215\3\3"+
    "\1\216\1\217\1\220\6\3\1\221\1\222\2\3\1\223"+
    "\1\224\2\3\1\225\1\226\1\227\1\3\1\230\1\231"+
    "\1\232\4\3\1\233\1\3\1\234\5\3\1\235\4\3"+
    "\1\236\1\237";

  private static int [] zzUnpackAction() {
    int [] result = new int[447];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\214"+
    "\0\214\0\214\0\214\0\214\0\214\0\214\0\u087a\0\u08c0"+
    "\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\214\0\u0aaa"+
    "\0\214\0\214\0\214\0\214\0\u0af0\0\214\0\u0b36\0\u0b7c"+
    "\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\214"+
    "\0\u0dac\0\214\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\214\0\214\0\u10f4"+
    "\0\u113a\0\214\0\214\0\u1180\0\u11c6\0\u120c\0\u1252\0\u0118"+
    "\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482"+
    "\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2"+
    "\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\214\0\214\0\214\0\214\0\214\0\214\0\u1b9e"+
    "\0\214\0\u1be4\0\214\0\214\0\214\0\214\0\214\0\214"+
    "\0\214\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\214\0\214\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u0118\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c"+
    "\0\u21a2\0\u0118\0\u21e8\0\u222e\0\u2274\0\u0118\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760"+
    "\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\214"+
    "\0\214\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u0118\0\u2f08\0\u2f4e"+
    "\0\u0118\0\214\0\u2f94\0\u0118\0\u2fda\0\u0118\0\u0118\0\u0118"+
    "\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a"+
    "\0\u0118\0\u3250\0\u0118\0\u3296\0\u32dc\0\u3322\0\u0118\0\u3368"+
    "\0\u33ae\0\u0118\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782"+
    "\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u0118\0\u396c"+
    "\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u0118\0\u0118\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3be2\0\u0118\0\u3c28\0\u3c6e\0\u0118\0\u0118"+
    "\0\u0118\0\u3cb4\0\u0118\0\u0118\0\u0118\0\u0118\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u0118\0\u0118\0\u0118\0\u3e9e"+
    "\0\u3ee4\0\u0118\0\u0118\0\u0118\0\u3f2a\0\u0118\0\u3f70\0\u0118"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u0118\0\u42b8\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u0118\0\u4416\0\u0118\0\u445c\0\u44a2\0\u0118\0\u0118"+
    "\0\u44e8\0\u0118\0\u452e\0\u0118\0\u4574\0\u45ba\0\u4600\0\u0118"+
    "\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u0118"+
    "\0\u4830\0\u4876\0\u48bc\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u4902\0\u0118\0\u4948\0\u0118"+
    "\0\u0118\0\u498e\0\u49d4\0\u0118\0\u4a1a\0\u4a60\0\u4aa6\0\u0118"+
    "\0\u4aec\0\u4b32\0\u0118\0\u4b78\0\u0118\0\u4bbe\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u4c04\0\u0118\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u0118\0\u4e34\0\u4e7a\0\u4ec0\0\u0118\0\u0118\0\u4f06"+
    "\0\u0118\0\u4f4c\0\u4f92\0\u4fd8\0\u0118\0\u0118\0\u0118\0\u501e"+
    "\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u0118\0\u0118\0\u51c2"+
    "\0\u5208\0\u0118\0\u0118\0\u524e\0\u5294\0\u52da\0\u0118\0\u5320"+
    "\0\u5366\0\u0118\0\u0118\0\u0118\0\u53ac\0\u53f2\0\u5438\0\u547e"+
    "\0\u0118\0\u54c4\0\u0118\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622"+
    "\0\u0118\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u0118\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[447];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\3\6\1\5\1\7\1\5\1\10"+
    "\1\11\2\5\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\5\1\32\1\33\1\34"+
    "\2\5\1\35\1\36\1\4\2\5\1\4\1\5\1\37"+
    "\1\40\1\4\1\5\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\3"+
    "\2\4\2\5\1\65\1\66\1\67\1\5\1\7\1\5"+
    "\1\70\1\11\2\5\1\12\1\5\1\13\1\14\1\15"+
    "\1\71\1\17\1\72\1\73\1\22\1\23\1\74\1\25"+
    "\1\26\1\75\1\30\1\4\1\31\1\5\1\32\1\76"+
    "\1\34\2\5\1\35\1\36\1\4\2\5\1\4\1\5"+
    "\1\37\1\77\1\4\1\5\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\107\0\2\4\5\0\1\100\1\4\1\0\1\101\1\102"+
    "\1\103\1\102\1\104\1\105\11\0\1\100\2\0\1\105"+
    "\1\0\1\4\11\0\1\4\2\0\1\4\3\0\1\4"+
    "\26\0\4\5\3\0\7\5\1\0\1\5\3\0\32\5"+
    "\2\0\2\5\31\0\3\6\77\0\1\106\1\107\5\0"+
    "\1\100\1\107\1\110\1\101\1\102\1\103\1\102\1\104"+
    "\1\105\11\0\1\100\2\0\1\105\1\0\1\107\1\0"+
    "\1\110\7\0\1\107\2\0\1\107\3\0\1\107\26\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\111"+
    "\2\5\1\112\25\5\2\0\2\5\25\0\4\5\3\0"+
    "\3\5\1\113\3\5\1\0\1\5\3\0\1\5\1\114"+
    "\2\5\1\115\25\5\2\0\2\5\25\0\2\104\6\0"+
    "\1\104\25\0\1\104\11\0\1\104\2\0\1\104\3\0"+
    "\1\104\46\0\1\116\46\0\1\117\37\0\1\120\1\121"+
    "\44\0\1\122\105\0\1\123\16\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\124\2\5\1\125\4\5"+
    "\1\126\20\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\127\23\5\2\0\2\5"+
    "\25\0\4\5\3\0\4\5\1\130\2\5\1\0\1\5"+
    "\3\0\1\131\6\5\1\132\22\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\133\1\134"+
    "\1\135\11\5\1\136\15\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\137\24\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\140\11\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\141\1\5\1\142"+
    "\4\5\1\143\22\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\144\30\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\145\1\146\4\5\1\147\11\5\1\150\11\5\2\0"+
    "\2\5\25\0\4\5\3\0\3\5\1\151\3\5\1\0"+
    "\1\5\3\0\32\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\152\7\5\1\153"+
    "\20\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\154\4\5\1\155\20\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\156\1\157\1\160\5\5\1\161\6\5\1\162"+
    "\6\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\163\13\5\1\164\11\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\165\20\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\166\27\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\20\5\1\167\2\5\1\170\6\5\2\0\2\5\31\0"+
    "\1\171\1\172\167\0\1\173\105\0\1\174\1\175\104\0"+
    "\1\176\105\0\1\177\2\0\1\200\102\0\1\201\3\0"+
    "\1\202\101\0\1\203\4\0\1\204\100\0\1\205\5\0"+
    "\1\206\77\0\1\207\6\0\1\210\76\0\1\211\23\0"+
    "\1\66\106\0\1\67\77\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\111\1\212\1\5\1\112\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\124\2\5\1\125\4\5\1\213\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\4\5\1\214\2\5"+
    "\1\0\1\5\3\0\1\131\6\5\1\132\22\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\133\1\134\1\135\6\5\1\215\2\5\1\136\15\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\141\1\5\1\142\4\5\1\216\22\5\2\0"+
    "\2\5\25\0\4\5\3\0\3\5\1\217\3\5\1\0"+
    "\1\5\3\0\7\5\1\220\5\5\1\221\2\5\1\222"+
    "\11\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\163\13\5\1\223\11\5\2\0"+
    "\2\5\103\0\1\224\42\0\1\225\107\0\1\225\70\0"+
    "\2\104\6\0\1\104\1\0\1\101\1\102\1\103\1\102"+
    "\1\0\1\105\14\0\1\105\1\0\1\104\11\0\1\104"+
    "\2\0\1\104\3\0\1\104\26\0\2\226\6\0\1\226"+
    "\1\0\1\101\1\102\1\103\1\102\2\0\1\226\15\0"+
    "\1\226\11\0\1\226\2\0\1\226\3\0\1\226\10\0"+
    "\1\226\15\0\2\106\6\0\1\106\1\0\1\101\1\102"+
    "\1\103\1\102\1\104\1\105\14\0\1\105\1\0\1\106"+
    "\11\0\1\106\2\0\1\106\3\0\1\106\26\0\1\106"+
    "\1\107\5\0\1\100\1\107\1\0\1\101\1\102\1\103"+
    "\1\102\1\104\1\105\11\0\1\100\2\0\1\105\1\0"+
    "\1\107\11\0\1\107\2\0\1\107\3\0\1\107\26\0"+
    "\3\110\4\0\1\100\1\110\2\0\1\110\1\0\1\110"+
    "\1\0\1\110\6\0\2\110\1\0\1\100\1\0\4\110"+
    "\5\0\1\110\3\0\2\110\1\0\1\110\3\0\1\110"+
    "\26\0\4\5\3\0\7\5\1\0\1\5\3\0\24\5"+
    "\1\227\5\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\27\5\1\230\2\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\231\2\5\1\232\25\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\233\11\5"+
    "\2\0\2\5\25\0\4\5\3\0\3\5\1\234\3\5"+
    "\1\0\1\5\3\0\32\5\2\0\2\5\24\0\5\120"+
    "\2\0\77\120\23\121\1\235\62\121\1\0\4\5\3\0"+
    "\3\5\1\236\3\5\1\0\1\5\3\0\2\5\1\237"+
    "\27\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\240\11\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\241"+
    "\17\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\242\24\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\243"+
    "\20\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\244\1\245\3\5\1\246\24\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\247\20\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\250\23\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\251\13\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\252\25\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\253\24\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\254\23\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\255\20\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\256\22\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\257\27\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\260\12\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\261\20\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\262\30\5\2\0"+
    "\2\5\25\0\4\5\3\0\4\5\1\263\2\5\1\0"+
    "\1\5\3\0\32\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\11\5\1\264\20\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\265\13\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\266\13\5\1\267"+
    "\6\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\270\22\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\271"+
    "\24\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\272\26\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\14\5\1\273"+
    "\15\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\274\11\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\10\5\1\275"+
    "\21\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\276\30\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\277"+
    "\25\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\300\24\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\301"+
    "\20\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\302\1\303\10\5\1\304\13\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\31\5\1\305\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\306\27\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\307\27\5\2\0\2\5\32\0\1\172\167\0"+
    "\1\310\105\0\1\311\16\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\312\22\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\241"+
    "\5\5\1\313\11\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\3\5\1\314\3\5\1\315"+
    "\22\5\2\0\2\5\25\0\4\5\3\0\4\5\1\316"+
    "\2\5\1\0\1\5\3\0\32\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\257"+
    "\1\317\26\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\2\5\1\320\13\5\1\321\13\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\322\26\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\323\24\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\324\11\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\325\4\5"+
    "\1\301\20\5\2\0\2\5\25\0\2\226\6\0\1\226"+
    "\1\0\1\101\1\102\1\103\1\102\20\0\1\226\11\0"+
    "\1\226\2\0\1\226\3\0\1\226\26\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\326\12\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\327\30\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\330\25\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\331\24\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\16\5\1\254\13\5\2\0"+
    "\2\5\24\0\22\121\1\332\1\235\62\121\1\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\333\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\334\26\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\27\5\1\335\2\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\13\5\1\336\11\5\1\337\2\5\1\340\1\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\1\341\17\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\342\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\343\23\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\344\17\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\345\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\346\17\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\347\24\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\350\11\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\351\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\352\17\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\353\24\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\354\2\5\1\0\1\5\3\0\32\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\355\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\356\17\5"+
    "\2\0\2\5\25\0\4\5\3\0\3\5\1\357\3\5"+
    "\1\0\1\5\3\0\32\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\360\2\5\1\0\1\5\3\0\32\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\361\25\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\362\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\363\10\5\1\364\13\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\365\20\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\366\24\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\13\5"+
    "\1\367\11\5\1\370\2\5\1\371\1\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\372\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\17\5\1\373\12\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\374\23\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\375\11\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\376\30\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\377\11\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\u0100\17\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\1\u0101\17\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\u0102\26\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u0103\23\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0104\24\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\23\5\1\227\6\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0105\24\5\2\0\2\5\25\0\4\5\3\0\3\5"+
    "\1\u0106\3\5\1\0\1\5\3\0\32\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\u0107\20\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\16\5\1\u0108\13\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\u0109\20\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\u010a\26\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u010b\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u010c\20\5\2\0\2\5"+
    "\25\0\4\5\3\0\4\5\1\u010d\2\5\1\0\1\5"+
    "\3\0\32\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u010e\20\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u010f\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u0110\20\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u0111\30\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\31\5\1\u0112\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\6\5\1\u0113"+
    "\23\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0114\24\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0115"+
    "\24\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\2\5\1\u0116\27\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u0117"+
    "\11\5\1\u0118\2\5\1\u0119\1\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\20\5\1\u011a"+
    "\11\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u011b\24\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u011c"+
    "\11\5\1\u011d\2\5\1\u011e\1\5\2\0\2\5\25\0"+
    "\4\5\3\0\3\5\1\u011f\3\5\1\0\1\5\3\0"+
    "\32\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u0120\25\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u0121"+
    "\11\5\1\u0122\2\5\1\u0123\1\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0124"+
    "\27\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u0125\11\5\1\u0126\2\5\1\u0127"+
    "\1\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\u0128\30\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\20\5\1\u0129"+
    "\11\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u012a\11\5\1\u012b\2\5\1\u012c"+
    "\1\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u012d\20\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\32\5\2\0"+
    "\1\5\1\u012e\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u012f\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0130\24\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0131\11\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0132\11\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0133\14\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0134\14\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0135\14\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\u0136\23\5"+
    "\2\0\2\5\25\0\4\5\3\0\3\5\1\u0137\3\5"+
    "\1\0\1\5\3\0\32\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\u0138\17\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u0139\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u013a\24\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u013b\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\23\5\1\u013c\6\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u013d\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u013e\30\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u013f\11\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0140\11\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0141\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0142\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0143\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0144\2\5\1\0\1\5\3\0\32\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0145\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u0146\22\5"+
    "\2\0\2\5\25\0\4\5\3\0\4\5\1\u0147\2\5"+
    "\1\0\1\5\3\0\32\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0148\2\5\1\0\1\5\3\0\32\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u0149\22\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u014a\11\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\14\5\1\u014b\15\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u014c\24\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u014d\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u014e\22\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u014f\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0150\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0151\11\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0152\14\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0153\14\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0154\14\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\u0155\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0156\11\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\16\5\1\u0157\13\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0158\11\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u0159\22\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u015a\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u015b\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u015c\11\5"+
    "\1\u015d\2\5\1\u015e\1\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u015f\11\5"+
    "\1\u0160\2\5\1\u0161\1\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u0162\11\5"+
    "\1\u0163\2\5\1\u0164\1\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\14\5\1\227\15\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0165\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0166\24\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\u0167\23\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\23\5\1\u0168\6\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\u0169\26\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u016a\13\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u016b\22\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u016c\22\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u016d\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u016e\30\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u016f\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0170\2\5\1\0\1\5\3\0\32\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0171\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u0172\13\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u0173\25\5\2\0\2\5\25\0\4\5"+
    "\3\0\3\5\1\u0174\3\5\1\0\1\5\3\0\32\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\31\5\1\u0175\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0176\25\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\u0177\26\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u0178\11\5\1\u0179"+
    "\2\5\1\u017a\1\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u017b\11\5\1\u017c"+
    "\2\5\1\u017d\1\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u017e\11\5\1\u017f"+
    "\2\5\1\u0180\1\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\u0181\23\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\14\5\1\u0182\15\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\u0183\12\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\6\5\1\u0184\23\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u0185\22\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\u0186\27\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\20\5\1\u0187\11\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\u0188\24\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\u0189\6\5\1\u018a"+
    "\20\5\2\0\2\5\25\0\4\5\3\0\3\5\1\u018b"+
    "\3\5\1\0\1\5\3\0\32\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\u018c"+
    "\17\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\u018d\22\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u018e"+
    "\22\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u018f\26\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0190"+
    "\27\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0191\20\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u0192"+
    "\22\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0193\24\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\u0194"+
    "\20\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0195\20\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0196"+
    "\24\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u0197\26\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\21\5\1\u0198"+
    "\3\5\1\u0199\2\5\1\u019a\1\5\2\0\1\u019b\1\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u019c\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u019d\30\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\27\5"+
    "\1\u019e\2\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u019f\24\5\2\0\2\5"+
    "\25\0\4\5\3\0\3\5\1\u01a0\3\5\1\0\1\5"+
    "\3\0\32\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u01a1\30\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u01a2\24\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01a3\20\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\u01a4\17\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u01a5\23\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u01a6\3\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\26\5\1\u01a7\3\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u01a8\3\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\7\5\1\u01a9\22\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u01aa\22\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\27\5\1\u01ab\2\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u01ac\22\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u01ad\24\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\10\5"+
    "\1\u01ae\21\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\22\5\1\u01af\7\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\22\5"+
    "\1\u01b0\7\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01b1\20\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u01b2\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01b3\20\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\23\5"+
    "\1\u01b4\6\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\23\5\1\u01b5\6\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\u01b6"+
    "\31\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u01b7\25\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u01b8"+
    "\25\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u01b9\20\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\3\5\1\u01ba"+
    "\26\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u01bb\26\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u01bc"+
    "\30\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\u01bd\30\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\24\5\1\u01be"+
    "\5\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\24\5\1\u01bf\5\5\2\0\2\5\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\34\1\7\11\10\1\1\11\1\1\4\11"+
    "\1\1\1\11\11\1\1\11\1\0\1\11\1\0\12\1"+
    "\2\11\2\1\2\11\46\1\6\11\1\1\1\11\1\1"+
    "\7\11\12\1\2\11\7\1\1\0\52\1\2\11\20\1"+
    "\1\11\345\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[447];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  GLSLFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 123: 
          { return PREPROCESSOR_IFNDEF;
          }
        case 160: break;
        case 89: 
          { return DMAT4_TYPE;
          }
        case 161: break;
        case 20: 
          { return RIGHT_ANGLE;
          }
        case 162: break;
        case 13: 
          { return RIGHT_BRACKET;
          }
        case 163: break;
        case 24: 
          { return TILDE;
          }
        case 164: break;
        case 10: 
          { return LEFT_BRACE;
          }
        case 165: break;
        case 31: 
          { return UINT_CONSTANT;
          }
        case 166: break;
        case 143: 
          { return COHERENT_KEYWORD;
          }
        case 167: break;
        case 37: 
          { return DIV_ASSIGN;
          }
        case 168: break;
        case 12: 
          { return LEFT_BRACKET;
          }
        case 169: break;
        case 47: 
          { return LEFT_OP;
          }
        case 170: break;
        case 120: 
          { return SMOOTH_KEYWORD;
          }
        case 171: break;
        case 90: 
          { return DMAT2_TYPE;
          }
        case 172: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 173: break;
        case 88: 
          { return DVEC3_TYPE;
          }
        case 174: break;
        case 126: 
          { return VARYING_KEYWORD;
          }
        case 175: break;
        case 138: 
          { return PRECISE_KEYWORD;
          }
        case 176: break;
        case 140: 
          { return PREPROCESSOR_DEFINED;
          }
        case 177: break;
        case 86: 
          { return DVEC4_TYPE;
          }
        case 178: break;
        case 54: 
          { return OR_ASSIGN;
          }
        case 179: break;
        case 59: 
          { return DOUBLE_CONSTANT;
          }
        case 180: break;
        case 58: 
          { return PREPROCESSOR_CONCAT;
          }
        case 181: break;
        case 127: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 182: break;
        case 62: 
          { return INT_TYPE;
          }
        case 183: break;
        case 5: 
          { return DOT;
          }
        case 184: break;
        case 99: 
          { return CONST_KEYWORD;
          }
        case 185: break;
        case 73: 
          { return BOOL_TYPE;
          }
        case 186: break;
        case 9: 
          { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
          }
        case 187: break;
        case 81: 
          { return FLOAT_TYPE;
          }
        case 188: break;
        case 87: 
          { return DVEC2_TYPE;
          }
        case 189: break;
        case 141: 
          { return VOLATILE_KEYWORD;
          }
        case 190: break;
        case 144: 
          { return CENTROID_KEYWORD;
          }
        case 191: break;
        case 1: 
          { return UNKNOWN;
          }
        case 192: break;
        case 74: 
          { return ELSE_KEYWORD;
          }
        case 193: break;
        case 78: 
          { return PREPROCESSOR_LINE;
          }
        case 194: break;
        case 130: 
          { return DMAT4X3_TYPE;
          }
        case 195: break;
        case 56: 
          { return NE_OP;
          }
        case 196: break;
        case 109: 
          { return MAT4X4_TYPE;
          }
        case 197: break;
        case 128: 
          { return DMAT4X4_TYPE;
          }
        case 198: break;
        case 28: 
          { return SEMICOLON;
          }
        case 199: break;
        case 151: 
          { return SAMPLER1D_TYPE;
          }
        case 200: break;
        case 14: 
          { return LEFT_PAREN;
          }
        case 201: break;
        case 110: 
          { return MAT4X2_TYPE;
          }
        case 202: break;
        case 80: 
          { return PREPROCESSOR_ELSE;
          }
        case 203: break;
        case 129: 
          { return DMAT4X2_TYPE;
          }
        case 204: break;
        case 121: 
          { return SHARED_KEYWORD;
          }
        case 205: break;
        case 79: 
          { return PREPROCESSOR_ELIF;
          }
        case 206: break;
        case 111: 
          { return MAT4X3_TYPE;
          }
        case 207: break;
        case 108: 
          { return BUFFER_KEYWORD;
          }
        case 208: break;
        case 94: 
          { return UVEC3_TYPE;
          }
        case 209: break;
        case 105: 
          { return PREPROCESSOR_ERROR;
          }
        case 210: break;
        case 100: 
          { return PATCH_KEYWORD;
          }
        case 211: break;
        case 92: 
          { return UVEC4_TYPE;
          }
        case 212: break;
        case 158: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 213: break;
        case 41: 
          { return DO_KEYWORD;
          }
        case 214: break;
        case 48: 
          { return GE_OP;
          }
        case 215: break;
        case 11: 
          { return RIGHT_BRACE;
          }
        case 216: break;
        case 107: 
          { return DOUBLE_TYPE;
          }
        case 217: break;
        case 26: 
          { return QUESTION;
          }
        case 218: break;
        case 157: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 219: break;
        case 93: 
          { return UVEC2_TYPE;
          }
        case 220: break;
        case 84: 
          { return IVEC3_TYPE;
          }
        case 221: break;
        case 50: 
          { return AND_ASSIGN;
          }
        case 222: break;
        case 43: 
          { return ADD_ASSIGN;
          }
        case 223: break;
        case 147: 
          { return INVARIANT_KEYWORD;
          }
        case 224: break;
        case 6: 
          { return DASH;
          }
        case 225: break;
        case 82: 
          { return IVEC4_TYPE;
          }
        case 226: break;
        case 45: 
          { return MOD_ASSIGN;
          }
        case 227: break;
        case 22: 
          { return CARET;
          }
        case 228: break;
        case 57: 
          { return PREPROCESSOR_IF;
          }
        case 229: break;
        case 67: 
          { return VOID_TYPE;
          }
        case 230: break;
        case 71: 
          { return BOOL_CONSTANT;
          }
        case 231: break;
        case 104: 
          { return PREPROCESSOR_ENDIF;
          }
        case 232: break;
        case 101: 
          { return WHILE_KEYWORD;
          }
        case 233: break;
        case 146: 
          { return RESTRICT_KEYWORD;
          }
        case 234: break;
        case 83: 
          { return IVEC2_TYPE;
          }
        case 235: break;
        case 142: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 236: break;
        case 42: 
          { return EQ_OP;
          }
        case 237: break;
        case 35: 
          { return COMMENT_LINE;
          }
        case 238: break;
        case 17: 
          { return PLUS;
          }
        case 239: break;
        case 133: 
          { return DMAT2X3_TYPE;
          }
        case 240: break;
        case 36: 
          { return COMMENT_BLOCK;
          }
        case 241: break;
        case 152: 
          { return PRECISION_KEYWORD;
          }
        case 242: break;
        case 112: 
          { return MAT2X4_TYPE;
          }
        case 243: break;
        case 131: 
          { return DMAT2X4_TYPE;
          }
        case 244: break;
        case 63: 
          { return LEFT_ASSIGN;
          }
        case 245: break;
        case 72: 
          { return UINT_TYPE;
          }
        case 246: break;
        case 149: 
          { return SAMPLER2D_TYPE;
          }
        case 247: break;
        case 125: 
          { return PREPROCESSOR_PRAGMA;
          }
        case 248: break;
        case 60: 
          { return FOR_KEYWORD;
          }
        case 249: break;
        case 103: 
          { return PREPROCESSOR_UNDEF;
          }
        case 250: break;
        case 27: 
          { return COLON;
          }
        case 251: break;
        case 19: 
          { return LEFT_ANGLE;
          }
        case 252: break;
        case 137: 
          { return UNIFORM_KEYWORD;
          }
        case 253: break;
        case 113: 
          { return MAT2X2_TYPE;
          }
        case 254: break;
        case 132: 
          { return DMAT2X2_TYPE;
          }
        case 255: break;
        case 114: 
          { return MAT2X3_TYPE;
          }
        case 256: break;
        case 38: 
          { return MUL_ASSIGN;
          }
        case 257: break;
        case 25: 
          { return BANG;
          }
        case 258: break;
        case 53: 
          { return XOR_OP;
          }
        case 259: break;
        case 7: 
          { return SLASH;
          }
        case 260: break;
        case 66: 
          { return FLAT_KEYWORD;
          }
        case 261: break;
        case 153: 
          { return WRITEONLY_KEYWORD;
          }
        case 262: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 263: break;
        case 119: 
          { return STRUCT;
          }
        case 264: break;
        case 124: 
          { return PREPROCESSOR_DEFINE;
          }
        case 265: break;
        case 40: 
          { return IN_KEYWORD;
          }
        case 266: break;
        case 8: 
          { return STAR;
          }
        case 267: break;
        case 75: 
          { return MAT4_TYPE;
          }
        case 268: break;
        case 154: 
          { return PREPROCESSOR_EXTENSION;
          }
        case 269: break;
        case 46: 
          { return LE_OP;
          }
        case 270: break;
        case 23: 
          { return VERTICAL_BAR;
          }
        case 271: break;
        case 21: 
          { return AMPERSAND;
          }
        case 272: break;
        case 33: 
          { return DEC_OP;
          }
        case 273: break;
        case 122: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 274: break;
        case 18: 
          { return PERCENT;
          }
        case 275: break;
        case 76: 
          { return MAT2_TYPE;
          }
        case 276: break;
        case 139: 
          { return PREPROCESSOR_VERSION;
          }
        case 277: break;
        case 15: 
          { return RIGHT_PAREN;
          }
        case 278: break;
        case 77: 
          { return MAT3_TYPE;
          }
        case 279: break;
        case 118: 
          { return SAMPLE_KEYWORD;
          }
        case 280: break;
        case 68: 
          { return VEC4_TYPE;
          }
        case 281: break;
        case 16: 
          { return EQUAL;
          }
        case 282: break;
        case 51: 
          { return AND_OP;
          }
        case 283: break;
        case 55: 
          { return OR_OP;
          }
        case 284: break;
        case 102: 
          { return PREPROCESSOR_IFDEF;
          }
        case 285: break;
        case 145: 
          { return READONLY_KEYWORD;
          }
        case 286: break;
        case 69: 
          { return VEC2_TYPE;
          }
        case 287: break;
        case 30: 
          { yybegin(YYINITIAL); return PREPROCESSOR_END;
          }
        case 288: break;
        case 61: 
          { return OUT_KEYWORD;
          }
        case 289: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 290: break;
        case 150: 
          { return SAMPLER3D_TYPE;
          }
        case 291: break;
        case 70: 
          { return VEC3_TYPE;
          }
        case 292: break;
        case 39: 
          { return IF_KEYWORD;
          }
        case 293: break;
        case 65: 
          { return PRECISION_QUALIFIER;
          }
        case 294: break;
        case 52: 
          { return XOR_ASSIGN;
          }
        case 295: break;
        case 34: 
          { return SUB_ASSIGN;
          }
        case 296: break;
        case 136: 
          { return DMAT3X3_TYPE;
          }
        case 297: break;
        case 49: 
          { return RIGHT_OP;
          }
        case 298: break;
        case 115: 
          { return MAT3X4_TYPE;
          }
        case 299: break;
        case 29: 
          { return COMMA;
          }
        case 300: break;
        case 98: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 301: break;
        case 134: 
          { return DMAT3X4_TYPE;
          }
        case 302: break;
        case 95: 
          { return BVEC4_TYPE;
          }
        case 303: break;
        case 106: 
          { return LAYOUT_KEYWORD;
          }
        case 304: break;
        case 156: 
          { return SAMPLERCUBE_TYPE;
          }
        case 305: break;
        case 32: 
          { return FLOAT_CONSTANT;
          }
        case 306: break;
        case 155: 
          { return SUBROUTINE_KEYWORD;
          }
        case 307: break;
        case 44: 
          { return INC_OP;
          }
        case 308: break;
        case 148: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 309: break;
        case 85: 
          { return INOUT_KEYWORD;
          }
        case 310: break;
        case 116: 
          { return MAT3X2_TYPE;
          }
        case 311: break;
        case 135: 
          { return DMAT3X2_TYPE;
          }
        case 312: break;
        case 96: 
          { return BVEC2_TYPE;
          }
        case 313: break;
        case 117: 
          { return MAT3X3_TYPE;
          }
        case 314: break;
        case 97: 
          { return BVEC3_TYPE;
          }
        case 315: break;
        case 159: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 316: break;
        case 91: 
          { return DMAT3_TYPE;
          }
        case 317: break;
        case 64: 
          { return RIGHT_ASSIGN;
          }
        case 318: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
