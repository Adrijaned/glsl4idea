/* The following code was generated by JFlex 1.4.3 on 23/04/15 09:32 */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/04/15 09:32 from the specification file
 * <tt>/home/abigail/glsl4idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\0\1\7\1\5\22\0\1\7\1\75\1\0"+
    "\1\57\2\0\1\76\1\0\1\67\1\70\1\20\1\72\1\103\1\16"+
    "\1\14\1\17\1\11\1\60\1\50\1\54\1\36\3\2\2\1\1\102"+
    "\1\62\1\73\1\71\1\74\1\101\1\0\1\52\1\3\1\44\1\51"+
    "\1\15\1\13\14\4\1\45\1\4\1\10\2\4\1\12\2\4\1\65"+
    "\1\56\1\66\1\100\1\4\1\0\1\27\1\33\1\35\1\24\1\34"+
    "\1\25\1\55\1\46\1\23\1\4\1\61\1\26\1\37\1\32\1\22"+
    "\1\42\1\4\1\43\1\41\1\30\1\31\1\21\1\47\1\40\1\53"+
    "\1\4\1\63\1\77\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\23\3\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\1\1\26\1\27\1\30\2\31\1\4\7\3"+
    "\1\1\1\32\4\33\2\2\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\5\3\1\42\1\43\1\44\36\3\2\4"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\3\1\56\10\3\1\57\1\33\1\0\4\3"+
    "\1\60\3\3\1\61\1\3\1\62\54\3\1\37\1\63"+
    "\2\3\1\64\1\65\1\66\5\3\1\67\1\70\1\3"+
    "\1\71\1\72\3\3\1\73\2\3\1\74\4\3\1\75"+
    "\1\76\1\77\21\3\1\100\1\3\1\101\1\102\6\3"+
    "\1\103\1\104\1\105\1\3\1\106\1\3\1\107\3\3"+
    "\1\110\1\111\1\112\1\3\1\113\1\3\1\114\13\3"+
    "\1\115\5\3\1\116\1\3\1\117\2\3\1\120\1\121"+
    "\1\3\1\122\10\3\1\123\3\3\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\3\1\137\1\140\2\3\1\141\3\3\1\142\1\143"+
    "\1\3\1\144\1\3\1\145\1\3\1\146\1\3\1\147"+
    "\7\3\1\150\3\3\1\151\1\152\1\3\1\153\3\3"+
    "\1\154\1\155\1\156\6\3\1\157\1\160\2\3\1\161"+
    "\1\162\2\3\1\163\1\164\1\165\2\3\1\166\1\167"+
    "\4\3\1\170\1\0\1\3\1\171\2\3\3\0\3\3"+
    "\3\0\1\172\2\3\3\0\2\3\2\0\1\173\1\174"+
    "\33\0\1\175\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\210"+
    "\0\210\0\210\0\210\0\210\0\210\0\210\0\210\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\210"+
    "\0\210\0\210\0\u0a5c\0\210\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\210\0\210\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\210\0\210\0\u0e58\0\u0e9c"+
    "\0\210\0\210\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u0110"+
    "\0\u1034\0\u0110\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\210\0\210\0\210\0\210\0\210\0\210\0\210"+
    "\0\210\0\210\0\210\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\210\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u0110\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u0110\0\u1dc0\0\u0110\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\210"+
    "\0\u0110\0\u29b4\0\u29f8\0\u0110\0\u0110\0\u0110\0\u2a3c\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u0110\0\u0110\0\u2b90\0\u0110\0\u0110"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u0110\0\u2ca0\0\u2ce4\0\u0110\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u0110"+
    "\0\u3388\0\u0110\0\u0110\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u0110\0\u0110\0\u0110\0\u3564\0\u0110\0\u35a8\0\u0110"+
    "\0\u35ec\0\u3630\0\u3674\0\u0110\0\u0110\0\u0110\0\u36b8\0\u0110"+
    "\0\u36fc\0\u0110\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894"+
    "\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u0110\0\u3a2c\0\u3a70"+
    "\0\u3ab4\0\u3af8\0\u3b3c\0\u0110\0\u3b80\0\u0110\0\u3bc4\0\u3c08"+
    "\0\u0110\0\u0110\0\u3c4c\0\u0110\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c"+
    "\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u0110\0\u3eb0\0\u3ef4\0\u3f38"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u0110\0\u3f7c\0\u0110\0\u3fc0\0\u0110\0\u0110\0\u4004\0\u4048"+
    "\0\u0110\0\u408c\0\u40d0\0\u4114\0\u0110\0\u4158\0\u419c\0\u0110"+
    "\0\u41e0\0\u0110\0\u4224\0\u0110\0\u4268\0\u0110\0\u42ac\0\u42f0"+
    "\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444\0\u0110\0\u4488\0\u44cc"+
    "\0\u4510\0\u0110\0\u0110\0\u4554\0\u0110\0\u4598\0\u45dc\0\u4620"+
    "\0\u0110\0\u0110\0\u0110\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774"+
    "\0\u47b8\0\u0110\0\u0110\0\u47fc\0\u4840\0\u0110\0\u0110\0\u4884"+
    "\0\u48c8\0\u490c\0\u0110\0\u4950\0\u4994\0\u49d8\0\u0110\0\u0110"+
    "\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u0110\0\u4b2c\0\u4b70\0\u0110"+
    "\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90"+
    "\0\u4dd4\0\u4e18\0\u4e5c\0\u0110\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c"+
    "\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u0110\0\u0110\0\u5104"+
    "\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324"+
    "\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544"+
    "\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764"+
    "\0\u57a8\0\u57ec\0\210\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940"+
    "\0\u5984\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60"+
    "\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80"+
    "\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0"+
    "\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\3\6\1\5\1\7\2\5\1\10"+
    "\1\5\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\4\1\31\1\5\1\32\1\33\1\34\2\5"+
    "\1\35\1\36\1\4\3\5\1\4\1\5\1\37\1\40"+
    "\1\4\1\5\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\3\2\4\2\5\1\63"+
    "\1\64\1\65\1\5\1\7\2\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\66\1\15\1\67\1\70\1\20\1\71"+
    "\1\22\1\23\1\72\1\25\1\26\1\73\1\30\1\4"+
    "\1\31\1\5\1\32\1\74\1\34\2\5\1\35\1\36"+
    "\1\4\3\5\1\4\1\5\1\37\1\75\1\4\1\5"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\105\0\2\4\5\0\1\76\1\4\1\0"+
    "\1\77\1\100\1\101\7\0\1\77\3\0\1\76\2\0"+
    "\1\101\1\0\1\4\11\0\1\4\3\0\1\4\3\0"+
    "\1\4\24\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\35\5\2\0\2\5\27\0\3\6\75\0\1\102\1\103"+
    "\5\0\1\76\1\103\1\104\1\77\1\100\1\101\7\0"+
    "\1\77\3\0\1\76\2\0\1\101\1\0\1\103\1\0"+
    "\1\104\7\0\1\103\3\0\1\103\3\0\1\103\24\0"+
    "\2\100\6\0\1\100\24\0\1\100\11\0\1\100\3\0"+
    "\1\100\3\0\1\100\41\0\1\105\52\0\1\106\31\0"+
    "\1\107\1\110\50\0\1\111\103\0\1\112\13\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\1\5\1\113\4\5"+
    "\1\114\4\5\1\115\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\10\5\1\116\24\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\1\117\3\5\1\120\4\5\1\121\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\1\5\1\122\1\123\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\1\5\1\124\3\5"+
    "\1\125\1\126\26\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\1\5\1\127\33\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\7\5\1\130\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\22\5\1\131\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\2\5\1\132\6\5\1\133\23\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\1\5\1\134"+
    "\33\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\1\135\1\136\6\5\1\137\11\5\1\140"+
    "\12\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\5\5\1\141\27\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\1\5\1\142"+
    "\11\5\1\143\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\6\5\1\144\4\5\1\145"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\6\5\1\146\1\147\1\150\5\5\1\151"+
    "\6\5\1\152\7\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\6\5\1\153\13\5\1\154"+
    "\12\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\13\5\1\155\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\2\5\1\156"+
    "\32\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\22\5\1\157\2\5\1\160\7\5\2\0"+
    "\2\5\27\0\1\161\1\162\166\0\1\163\103\0\1\164"+
    "\1\165\102\0\1\166\103\0\1\167\103\0\1\170\110\0"+
    "\1\171\104\0\1\172\104\0\1\173\11\0\1\64\104\0"+
    "\1\65\75\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\1\5\1\113\4\5\1\114\4\5\1\174\21\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\1\117\3\5\1\175\4\5\1\121\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\1\5"+
    "\1\122\1\123\10\5\1\176\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\1\5\1\127"+
    "\1\177\32\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\2\5\1\132\6\5\1\200\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\5\5\1\201\3\5\1\202\5\5\1\203\2\5"+
    "\1\204\12\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\6\5\1\153\13\5\1\205\12\5"+
    "\2\0\2\5\101\0\1\206\25\0\2\100\6\0\1\100"+
    "\1\0\1\77\1\0\1\101\7\0\1\77\6\0\1\101"+
    "\1\0\1\100\11\0\1\100\3\0\1\100\3\0\1\100"+
    "\24\0\2\207\6\0\1\207\1\0\1\77\2\0\1\207"+
    "\6\0\1\77\10\0\1\207\11\0\1\207\3\0\1\207"+
    "\3\0\1\207\11\0\1\207\12\0\2\102\6\0\1\102"+
    "\1\0\1\77\1\100\1\101\7\0\1\77\6\0\1\101"+
    "\1\0\1\102\11\0\1\102\3\0\1\102\3\0\1\102"+
    "\24\0\1\102\1\103\5\0\1\76\1\103\1\0\1\77"+
    "\1\100\1\101\7\0\1\77\3\0\1\76\2\0\1\101"+
    "\1\0\1\103\11\0\1\103\3\0\1\103\3\0\1\103"+
    "\24\0\3\104\4\0\1\76\1\104\1\0\1\104\1\0"+
    "\1\104\6\0\2\104\1\0\1\104\1\0\1\76\1\0"+
    "\4\104\5\0\1\104\3\0\3\104\1\0\1\104\3\0"+
    "\1\104\23\0\5\107\2\0\75\107\20\110\1\210\63\110"+
    "\1\0\4\5\3\0\4\5\1\0\1\5\3\0\2\5"+
    "\1\211\2\5\1\212\27\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\22\5\1\213\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\14\5\1\214\20\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\7\5\1\215\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\13\5\1\216\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\1\217\1\220\5\5"+
    "\1\221\25\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\20\5\1\222\14\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\22\5"+
    "\1\223\12\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\1\5\1\224\4\5\1\225\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\5\5\1\226\27\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\26\5\1\227\6\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\7\5\1\230\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\10\5\1\231\24\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\11\5\1\232\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\2\5\1\233\32\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\21\5\1\234\13\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\13\5\1\235\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\1\5\1\236\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\4\5\1\237\30\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\13\5\1\240\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\20\5\1\241\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\11\5\1\242\13\5\1\243\7\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\11\5"+
    "\1\244\23\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\7\5\1\245\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\3\5"+
    "\1\246\31\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\16\5\1\247\16\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\22\5"+
    "\1\250\12\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\12\5\1\251\22\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\1\5"+
    "\1\252\33\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\6\5\1\253\26\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\7\5"+
    "\1\254\25\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\13\5\1\255\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\6\5"+
    "\1\256\1\257\10\5\1\260\14\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\34\5\1\261"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\2\5\1\262\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\2\5\1\263\32\5"+
    "\2\0\2\5\30\0\1\162\76\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\14\5\1\214\5\5\1\264\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\3\5\1\265\5\5\1\266\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\4\5"+
    "\1\267\30\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\11\5\1\270\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\2\5"+
    "\1\233\1\271\31\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\2\5\1\272\15\5\1\273"+
    "\14\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\3\5\1\274\31\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\7\5\1\275"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\22\5\1\276\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\6\5\1\277"+
    "\4\5\1\255\21\5\2\0\2\5\23\0\2\207\6\0"+
    "\1\207\1\0\1\77\11\0\1\77\10\0\1\207\11\0"+
    "\1\207\3\0\1\207\3\0\1\207\23\0\17\110\1\300"+
    "\1\210\63\110\1\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\3\5\1\301\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\6\5\1\302\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\32\5\1\303\2\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\15\5\1\304\11\5"+
    "\1\305\3\5\1\306\1\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\14\5\1\307\20\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\6\5\1\310\26\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\10\5\1\311\24\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\14\5\1\312\20\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\6\5\1\313\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\7\5\1\314\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\20\5\1\231\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\21\5\1\315\13\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\22\5\1\316\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\13\5\1\317\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\7\5\1\320\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\4\5\1\321\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\13\5\1\322\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\14\5\1\323\20\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\5\5\1\324\27\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\4\5\1\325\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\6\5\1\326\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\13\5\1\327\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\7\5\1\330\10\5"+
    "\1\331\14\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\13\5\1\332\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\7\5"+
    "\1\333\25\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\15\5\1\334\11\5\1\335\3\5"+
    "\1\336\1\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\2\5\1\337\32\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\21\5"+
    "\1\340\13\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\10\5\1\341\24\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\22\5"+
    "\1\342\12\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\1\5\1\343\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\22\5"+
    "\1\344\12\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\14\5\1\345\20\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\14\5"+
    "\1\346\20\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\3\5\1\347\31\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\10\5"+
    "\1\350\24\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\7\5\1\351\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\25\5"+
    "\1\227\7\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\7\5\1\352\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\5\5"+
    "\1\353\27\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\20\5\1\354\14\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\13\5"+
    "\1\355\21\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\3\5\1\356\31\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\2\5"+
    "\1\357\32\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\13\5\1\360\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\13\5"+
    "\1\361\21\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\4\5\1\362\30\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\13\5"+
    "\1\363\21\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\2\5\1\364\32\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\13\5"+
    "\1\365\21\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\1\5\1\366\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\34\5"+
    "\1\367\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\7\5\1\370\25\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\2\5\1\371"+
    "\32\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\15\5\1\372\11\5\1\373\3\5\1\374"+
    "\1\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\22\5\1\375\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\7\5\1\376"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\6\5\1\377\26\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\7\5\1\u0100"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\2\5\1\u0101\32\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\1\5\1\u0102"+
    "\33\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\22\5\1\u0103\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\15\5\1\u0104"+
    "\11\5\1\u0105\3\5\1\u0106\1\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\13\5\1\u0107"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\35\5\2\0\1\5\1\u0108\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\2\5\1\u0109\32\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\7\5\1\u010a\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\22\5\1\u010b\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\22\5\1\u010c\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\17\5\1\u010d\15\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\17\5\1\u010e\15\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\17\5\1\u010f\15\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\10\5\1\u0110\24\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\5\5\1\u0111\27\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\14\5\1\u0112\20\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\1\5\1\u0113\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\7\5\1\u0114\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\13\5\1\u0115\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\25\5\1\u0116\7\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\2\5\1\u0117\32\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\1\5\1\u0118\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\22\5\1\u0119\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\22\5\1\u011a\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\13\5\1\u011b\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\13\5\1\u011c\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\2\5\1\u011d\32\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\4\5\1\u011e\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\13\5\1\u011f\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\11\5\1\u0120\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\4\5\1\u0121\30\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\4\5\1\u0122\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\11\5\1\u0123\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\22\5\1\u0124\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\16\5\1\u0125\16\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\2\5\1\u0126\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\11\5\1\u0127\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\2\5\1\u0128\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\22\5\1\u0129\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\12\5\1\u012a\22\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\22\5\1\u012b\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\20\5\1\u012c\14\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\22\5\1\u012d\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\11\5\1\u012e\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\13\5\1\u012f\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\1\5\1\u0130\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\15\5\1\u0131\11\5"+
    "\1\u0132\3\5\1\u0133\1\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\15\5\1\u0134\11\5"+
    "\1\u0135\3\5\1\u0136\1\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\15\5\1\u0137\11\5"+
    "\1\u0138\3\5\1\u0139\1\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\16\5\1\227\16\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\13\5\1\u013a\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\7\5\1\u013b\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\10\5\1\u013c\24\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\25\5\1\u013d\7\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\3\5\1\u013e\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\20\5\1\u013f\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\11\5\1\u0140\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\11\5\1\u0141\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\2\5\1\u0142\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\1\5\1\u0143\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\1\5\1\u0144\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\4\5\1\u0145\30\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\13\5\1\u0146\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\20\5\1\u0147\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\6\5\1\u0148\26\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\5\5\1\u0149\27\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\34\5\1\u014a\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\6\5\1\u014b\26\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\3\5\1\u014c\31\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\10\5\1\u014d\24\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\16\5\1\u014e\16\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\21\5\1\u014f\13\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\10\5\1\u0150\24\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\11\5\1\u0151\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\2\5\1\u0152\32\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\22\5\1\u0153\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\0\1\5\3\0"+
    "\7\5\1\u0154\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\4\5\1\0\1\5\3\0\2\5\1\u0155\10\5\1\u0156"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\5\5\1\u0157\27\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\14\5\1\u0158"+
    "\20\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\11\5\1\u0159\23\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\11\5\1\u015a"+
    "\23\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\3\5\1\u015b\31\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\2\5\1\u015c"+
    "\32\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\13\5\1\u015d\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\11\5\1\u015e"+
    "\23\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\7\5\1\u015f\25\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\13\5\1\u0160"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\13\5\1\u0161\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\7\5\1\u0162"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\3\5\1\u0163\31\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\23\5\1\u0164"+
    "\3\5\1\u0165\3\5\1\u0166\1\5\2\0\1\u0167\1\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\2\5"+
    "\1\u0168\32\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\1\5\1\u0169\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\32\5"+
    "\1\u016a\2\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\7\5\1\u016b\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\5\5"+
    "\1\u016c\27\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\1\5\1\u016d\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\7\5"+
    "\1\u016e\25\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\13\5\1\u016f\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\14\5"+
    "\1\u0170\20\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\10\5\1\u0171\24\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\30\5"+
    "\1\u0172\4\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\30\5\1\u0173\4\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\30\5"+
    "\1\u0174\4\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\11\5\1\u0175\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\11\5"+
    "\1\u0176\23\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\32\5\1\u0177\2\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\11\5"+
    "\1\u0178\23\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\7\5\1\u0179\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\12\5"+
    "\1\u017a\22\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\24\5\1\u017b\10\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\24\5"+
    "\1\u017c\10\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\13\5\1\u017d\21\5\2\0\2\5"+
    "\23\0\4\5\2\0\1\u017e\4\5\1\0\1\5\3\0"+
    "\35\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\2\5\1\u017f\32\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\13\5\1\u0180"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\25\5\1\u0181\7\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\0\1\5\3\0\25\5\1\u0182"+
    "\7\5\2\0\2\5\31\0\1\u017e\16\0\1\u0183\10\0"+
    "\1\u0184\6\0\1\u0185\36\0\4\5\3\0\4\5\1\0"+
    "\1\5\3\0\1\u0186\34\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\6\5\1\u0187\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\6\5\1\u0188\26\5\2\0\2\5\44\0\1\u0189"+
    "\115\0\1\u018a\72\0\1\u018b\61\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\13\5\1\u018c\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\3\5"+
    "\1\u018d\31\5\2\0\2\5\23\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\3\5\1\u018e\31\5\2\0\2\5"+
    "\71\0\1\u018f\60\0\1\u0190\134\0\1\u0191\27\0\4\5"+
    "\3\0\4\5\1\0\1\5\3\0\1\5\1\u0192\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\0\1\5"+
    "\3\0\1\5\1\u0193\33\5\2\0\2\5\64\0\1\u0194"+
    "\64\0\1\u0195\126\0\1\u018f\36\0\4\5\3\0\4\5"+
    "\1\0\1\5\3\0\26\5\1\u0196\6\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\0\1\5\3\0\26\5"+
    "\1\u0197\6\5\2\0\2\5\31\0\1\u0198\125\0\1\u0199"+
    "\61\0\1\u0198\11\0\1\u019a\1\0\1\u019b\1\0\1\u019c"+
    "\3\0\1\u019d\1\0\1\u019e\3\0\1\u019f\1\0\1\u01a0"+
    "\101\0\1\u018f\66\0\1\u01a1\11\0\1\u01a2\70\0\1\u01a3"+
    "\10\0\1\u01a4\6\0\1\u01a5\70\0\1\u01a6\76\0\1\u01a3"+
    "\1\0\1\u01a7\15\0\1\u01a5\63\0\1\u01a3\1\u01a8\110\0"+
    "\1\u01a9\103\0\1\u01aa\77\0\1\u01ab\115\0\1\u01ac\102\0"+
    "\1\u01a2\77\0\1\u01ad\102\0\1\u01ae\76\0\1\u01af\113\0"+
    "\1\u01a4\73\0\1\u01b0\111\0\1\u01b1\112\0\1\u01b2\70\0"+
    "\1\u01ad\115\0\1\u01ad\11\0\1\u01ad\3\0\1\u01ad\111\0"+
    "\1\u01b3\60\0\1\u01b4\73\0\1\u01a4\102\0\1\u01ad\113\0"+
    "\1\u01b5\11\0\1\u01b5\3\0\1\u01b5\71\0\1\u01b6\103\0"+
    "\1\u01b7\101\0\1\u01ac\21\0\1\u01b3\47\0\1\u01b8\103\0"+
    "\1\u01b9\111\0\1\u01ba\103\0\1\u01bb\112\0\1\u01bc\103\0"+
    "\1\u01bd\104\0\1\u01be\3\0\1\u01bf\3\0\1\u01c0\73\0"+
    "\1\u01c1\3\0\1\u01c2\3\0\1\u01c0\60\0\1\u01c3\123\0"+
    "\1\u01c4\103\0\1\u01ad\63\0\1\u01c5\123\0\1\u01c6\65\0"+
    "\1\u01c7\115\0\1\u01c8\4\0\1\u01c9\7\0\1\u01b3\54\0"+
    "\1\u01ca\122\0\1\u01cb\7\0\1\u01b3\55\0\1\u01cc\115\0"+
    "\1\u01cd\100\0\1\u01ce\74\0\1\u01ad\112\0\1\u01cf\105\0"+
    "\1\u01c8\14\0\1\u01b3\50\0\1\u01d0\117\0\1\u01d1\103\0"+
    "\1\u01d2\64\0\1\u01d3\106\0\1\u01d4\103\0\1\u01d5\76\0"+
    "\1\u01d6\134\0\1\u01cc\103\0\1\u01ad\77\0\1\u01ad\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24956];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\34\1\10\11\10\1\3\11\1\1\1\11"+
    "\11\1\2\11\5\1\2\11\2\1\2\11\47\1\12\11"+
    "\12\1\1\11\1\1\1\0\67\1\1\11\275\1\1\0"+
    "\4\1\3\0\3\1\3\0\3\1\3\0\2\1\2\0"+
    "\2\1\33\0\1\11\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return IDENTIFIER;
          }
        case 126: break;
        case 115: 
          { return SAMPLER2D_TYPE;
          }
        case 127: break;
        case 67: 
          { return IVEC4_TYPE;
          }
        case 128: break;
        case 101: 
          { return VARYING_KEYWORD;
          }
        case 129: break;
        case 107: 
          { return VOLATILE_KEYWORD;
          }
        case 130: break;
        case 28: 
          { return DEC_OP;
          }
        case 131: break;
        case 35: 
          { return IN_KEYWORD;
          }
        case 132: break;
        case 31: 
          { return COMMENT_BLOCK;
          }
        case 133: break;
        case 112: 
          { return RESTRICT_KEYWORD;
          }
        case 134: break;
        case 22: 
          { return QUESTION;
          }
        case 135: break;
        case 17: 
          { return EQUAL;
          }
        case 136: break;
        case 82: 
          { return PREPROCESSOR_ERROR;
          }
        case 137: break;
        case 52: 
          { return VEC4_TYPE;
          }
        case 138: break;
        case 95: 
          { return SMOOTH_KEYWORD;
          }
        case 139: break;
        case 92: 
          { return MAT3X3_TYPE;
          }
        case 140: break;
        case 19: 
          { return LEFT_ANGLE;
          }
        case 141: break;
        case 64: 
          { return PREPROCESSOR_LINE;
          }
        case 142: break;
        case 80: 
          { return PREPROCESSOR_UNDEF;
          }
        case 143: break;
        case 23: 
          { return COLON;
          }
        case 144: break;
        case 69: 
          { return IVEC3_TYPE;
          }
        case 145: break;
        case 110: 
          { return CENTROID_KEYWORD;
          }
        case 146: break;
        case 48: 
          { return OUT_KEYWORD;
          }
        case 147: break;
        case 102: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 148: break;
        case 109: 
          { return COHERENT_KEYWORD;
          }
        case 149: break;
        case 99: 
          { return PREPROCESSOR_DEFINE;
          }
        case 150: break;
        case 91: 
          { return MAT3X2_TYPE;
          }
        case 151: break;
        case 76: 
          { return CONST_KEYWORD;
          }
        case 152: break;
        case 72: 
          { return BVEC4_TYPE;
          }
        case 153: break;
        case 47: 
          { return PREPROCESSOR_CONCAT;
          }
        case 154: break;
        case 6: 
          { return DASH;
          }
        case 155: break;
        case 45: 
          { return XOR_OP;
          }
        case 156: break;
        case 37: 
          { return EQ_OP;
          }
        case 157: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 158: break;
        case 25: 
          { yybegin(YYINITIAL); return PREPROCESSOR_END;
          }
        case 159: break;
        case 105: 
          { return PREPROCESSOR_VERSION;
          }
        case 160: break;
        case 108: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 161: break;
        case 14: 
          { return RIGHT_BRACKET;
          }
        case 162: break;
        case 12: 
          { return RIGHT_BRACE;
          }
        case 163: break;
        case 10: 
          { return SEMICOLON;
          }
        case 164: break;
        case 75: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 165: break;
        case 84: 
          { return MAT4X4_TYPE;
          }
        case 166: break;
        case 24: 
          { return COMMA;
          }
        case 167: break;
        case 54: 
          { return VEC3_TYPE;
          }
        case 168: break;
        case 114: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 169: break;
        case 119: 
          { return PREPROCESSOR_EXTENSION;
          }
        case 170: break;
        case 38: 
          { return ADD_ASSIGN;
          }
        case 171: break;
        case 87: 
          { return MAT2X4_TYPE;
          }
        case 172: break;
        case 66: 
          { return PREPROCESSOR_ELSE;
          }
        case 173: break;
        case 94: 
          { return STRUCT;
          }
        case 174: break;
        case 61: 
          { return MAT4_TYPE;
          }
        case 175: break;
        case 68: 
          { return IVEC2_TYPE;
          }
        case 176: break;
        case 18: 
          { return PLUS;
          }
        case 177: break;
        case 27: 
          { return FLOAT_CONSTANT;
          }
        case 178: break;
        case 116: 
          { return SAMPLER3D_TYPE;
          }
        case 179: break;
        case 53: 
          { return VEC2_TYPE;
          }
        case 180: break;
        case 121: 
          { return SAMPLERCUBE_TYPE;
          }
        case 181: break;
        case 74: 
          { return BVEC3_TYPE;
          }
        case 182: break;
        case 46: 
          { return PREPROCESSOR_IF;
          }
        case 183: break;
        case 113: 
          { return INVARIANT_KEYWORD;
          }
        case 184: break;
        case 5: 
          { return DOT;
          }
        case 185: break;
        case 65: 
          { return PREPROCESSOR_ELIF;
          }
        case 186: break;
        case 29: 
          { return SUB_ASSIGN;
          }
        case 187: break;
        case 59: 
          { return BOOL_TYPE;
          }
        case 188: break;
        case 71: 
          { return FLOAT_TYPE;
          }
        case 189: break;
        case 83: 
          { return BUFFER_KEYWORD;
          }
        case 190: break;
        case 50: 
          { return FOR_KEYWORD;
          }
        case 191: break;
        case 39: 
          { return INC_OP;
          }
        case 192: break;
        case 117: 
          { return SAMPLER1D_TYPE;
          }
        case 193: break;
        case 86: 
          { return MAT4X3_TYPE;
          }
        case 194: break;
        case 57: 
          { return BOOL_CONSTANT;
          }
        case 195: break;
        case 1: 
          { return UNKNOWN;
          }
        case 196: break;
        case 89: 
          { return MAT2X3_TYPE;
          }
        case 197: break;
        case 40: 
          { return LE_OP;
          }
        case 198: break;
        case 32: 
          { return DIV_ASSIGN;
          }
        case 199: break;
        case 36: 
          { return DO_KEYWORD;
          }
        case 200: break;
        case 81: 
          { return PREPROCESSOR_ENDIF;
          }
        case 201: break;
        case 73: 
          { return BVEC2_TYPE;
          }
        case 202: break;
        case 26: 
          { return UINT_CONSTANT;
          }
        case 203: break;
        case 60: 
          { return ELSE_KEYWORD;
          }
        case 204: break;
        case 44: 
          { return OR_OP;
          }
        case 205: break;
        case 16: 
          { return RIGHT_PAREN;
          }
        case 206: break;
        case 11: 
          { return LEFT_BRACE;
          }
        case 207: break;
        case 63: 
          { return MAT3_TYPE;
          }
        case 208: break;
        case 100: 
          { return PREPROCESSOR_PRAGMA;
          }
        case 209: break;
        case 103: 
          { return UNIFORM_KEYWORD;
          }
        case 210: break;
        case 123: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 211: break;
        case 85: 
          { return MAT4X2_TYPE;
          }
        case 212: break;
        case 118: 
          { return WRITEONLY_KEYWORD;
          }
        case 213: break;
        case 51: 
          { return VOID_TYPE;
          }
        case 214: break;
        case 125: 
          { return PRECISION_STATEMENT;
          }
        case 215: break;
        case 88: 
          { return MAT2X2_TYPE;
          }
        case 216: break;
        case 104: 
          { return PRECISE_KEYWORD;
          }
        case 217: break;
        case 56: 
          { return PRECISION_KEYWORD;
          }
        case 218: break;
        case 30: 
          { return COMMENT_LINE;
          }
        case 219: break;
        case 62: 
          { return MAT2_TYPE;
          }
        case 220: break;
        case 43: 
          { return AND_OP;
          }
        case 221: break;
        case 20: 
          { return RIGHT_ANGLE;
          }
        case 222: break;
        case 7: 
          { return SLASH;
          }
        case 223: break;
        case 9: 
          { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
          }
        case 224: break;
        case 34: 
          { return IF_KEYWORD;
          }
        case 225: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 226: break;
        case 70: 
          { return INOUT_KEYWORD;
          }
        case 227: break;
        case 33: 
          { return MUL_ASSIGN;
          }
        case 228: break;
        case 78: 
          { return WHILE_KEYWORD;
          }
        case 229: break;
        case 122: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 230: break;
        case 41: 
          { return GE_OP;
          }
        case 231: break;
        case 111: 
          { return READONLY_KEYWORD;
          }
        case 232: break;
        case 15: 
          { return LEFT_PAREN;
          }
        case 233: break;
        case 58: 
          { return UINT_TYPE;
          }
        case 234: break;
        case 90: 
          { return MAT3X4_TYPE;
          }
        case 235: break;
        case 8: 
          { return STAR;
          }
        case 236: break;
        case 79: 
          { return PREPROCESSOR_IFDEF;
          }
        case 237: break;
        case 77: 
          { return PATCH_KEYWORD;
          }
        case 238: break;
        case 96: 
          { return SHARED_KEYWORD;
          }
        case 239: break;
        case 93: 
          { return SAMPLE_KEYWORD;
          }
        case 240: break;
        case 124: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 241: break;
        case 55: 
          { return FLAT_KEYWORD;
          }
        case 242: break;
        case 42: 
          { return NE_OP;
          }
        case 243: break;
        case 21: 
          { return BANG;
          }
        case 244: break;
        case 13: 
          { return LEFT_BRACKET;
          }
        case 245: break;
        case 106: 
          { return PREPROCESSOR_DEFINED;
          }
        case 246: break;
        case 98: 
          { return PREPROCESSOR_IFNDEF;
          }
        case 247: break;
        case 120: 
          { return SUBROUTINE_KEYWORD;
          }
        case 248: break;
        case 97: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 249: break;
        case 49: 
          { return INT_TYPE;
          }
        case 250: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
