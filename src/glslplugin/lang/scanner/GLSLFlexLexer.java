/* The following code was generated by JFlex 1.4.3 on 23/04/15 09:33 */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/04/15 09:33 from the specification file
 * <tt>/home/abigail/glsl4idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\0\1\7\1\5\22\0\1\7\1\76\1\0"+
    "\1\60\2\0\1\77\1\0\1\70\1\71\1\23\1\73\1\104\1\21"+
    "\1\17\1\22\1\11\1\61\1\51\1\55\1\37\3\2\2\1\1\103"+
    "\1\63\1\74\1\72\1\75\1\102\1\0\1\53\1\3\1\45\1\52"+
    "\1\20\1\16\5\4\1\15\6\4\1\46\1\4\1\10\2\4\1\12"+
    "\2\4\1\66\1\57\1\67\1\101\1\4\1\0\1\30\1\34\1\36"+
    "\1\27\1\35\1\14\1\56\1\47\1\26\1\4\1\62\1\13\1\40"+
    "\1\33\1\25\1\43\1\4\1\44\1\42\1\31\1\32\1\24\1\50"+
    "\1\41\1\54\1\4\1\64\1\100\1\65\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\2\3\1\5"+
    "\1\6\1\7\1\10\21\3\1\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\3\1\1\26\1\27\1\30\2\31\1\4"+
    "\7\3\1\1\1\32\1\0\1\33\1\0\3\33\2\2"+
    "\4\3\1\34\1\35\1\36\1\37\1\40\1\41\4\3"+
    "\1\42\1\3\1\43\1\3\1\44\34\3\2\4\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\2\3\1\56\7\3\1\57\1\60\1\33\3\3\1\61"+
    "\1\3\1\0\4\3\1\62\3\3\1\63\55\3\1\64"+
    "\1\3\1\65\1\37\1\3\1\66\1\3\1\67\1\70"+
    "\1\71\10\3\1\72\1\3\1\73\3\3\1\74\2\3"+
    "\1\75\4\3\1\76\1\77\1\100\15\3\1\101\5\3"+
    "\1\102\1\103\4\3\1\104\2\3\1\105\1\106\1\107"+
    "\1\3\1\110\1\111\1\112\1\113\2\3\1\114\1\115"+
    "\1\116\1\3\1\117\1\120\1\121\2\3\1\122\1\123"+
    "\1\124\1\3\1\125\1\3\1\126\13\3\1\127\5\3"+
    "\1\130\1\3\1\131\2\3\1\132\1\133\1\3\1\134"+
    "\4\3\1\135\7\3\1\136\3\3\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151"+
    "\1\3\1\152\1\153\2\3\1\154\3\3\1\155\1\156"+
    "\1\3\1\157\1\3\1\160\1\3\1\161\1\162\1\163"+
    "\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\3"+
    "\1\173\7\3\1\174\3\3\1\175\1\176\1\3\1\177"+
    "\3\3\1\200\1\201\1\202\6\3\1\203\1\204\2\3"+
    "\1\205\1\206\2\3\1\207\1\210\1\211\2\3\1\212"+
    "\1\213\4\3\1\214\1\0\1\3\1\215\2\3\3\0"+
    "\3\3\3\0\1\216\2\3\3\0\2\3\2\0\1\217"+
    "\1\220\33\0\1\221\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[507];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\212"+
    "\0\212\0\212\0\u0a83\0\212\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\212\0\u0d35\0\212"+
    "\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\212\0\212\0\u102c\0\u1071\0\212\0\212"+
    "\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u0114\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\u1d1c\0\212\0\212\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u0114\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u0114"+
    "\0\u2013\0\u2058\0\u209d\0\u0114\0\u20e2\0\u2127\0\u216c\0\u21b1"+
    "\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9"+
    "\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79"+
    "\0\u2cbe\0\u0114\0\u2d03\0\u0114\0\212\0\u2d48\0\u0114\0\u2d8d"+
    "\0\u0114\0\u0114\0\u0114\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u0114\0\u2ffa\0\u0114\0\u303f\0\u3084"+
    "\0\u30c9\0\u0114\0\u310e\0\u3153\0\u0114\0\u3198\0\u31dd\0\u3222"+
    "\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a"+
    "\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672"+
    "\0\u36b7\0\u0114\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u0114"+
    "\0\u0114\0\u3855\0\u389a\0\u38df\0\u3924\0\u0114\0\u3969\0\u39ae"+
    "\0\u0114\0\u0114\0\u0114\0\u39f3\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u0114\0\u0114"+
    "\0\u0114\0\u3bd6\0\u3c1b\0\u0114\0\u0114\0\u0114\0\u3c60\0\u0114"+
    "\0\u3ca5\0\u0114\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43"+
    "\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u0114\0\u3fe1\0\u4026"+
    "\0\u406b\0\u40b0\0\u40f5\0\u0114\0\u413a\0\u0114\0\u417f\0\u41c4"+
    "\0\u0114\0\u0114\0\u4209\0\u0114\0\u424e\0\u4293\0\u42d8\0\u431d"+
    "\0\u0114\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500"+
    "\0\u0114\0\u4545\0\u458a\0\u45cf\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u4614\0\u0114\0\u4659"+
    "\0\u0114\0\u0114\0\u469e\0\u46e3\0\u0114\0\u4728\0\u476d\0\u47b2"+
    "\0\u0114\0\u47f7\0\u483c\0\u0114\0\u4881\0\u0114\0\u48c6\0\u0114"+
    "\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\u490b\0\u0114\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64"+
    "\0\u4aa9\0\u4aee\0\u0114\0\u4b33\0\u4b78\0\u4bbd\0\u0114\0\u0114"+
    "\0\u4c02\0\u0114\0\u4c47\0\u4c8c\0\u4cd1\0\u0114\0\u0114\0\u0114"+
    "\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u0114\0\u0114"+
    "\0\u4eb4\0\u4ef9\0\u0114\0\u0114\0\u4f3e\0\u4f83\0\u4fc8\0\u0114"+
    "\0\u500d\0\u5052\0\u5097\0\u0114\0\u0114\0\u50dc\0\u5121\0\u5166"+
    "\0\u51ab\0\u0114\0\u51f0\0\u5235\0\u0114\0\u527a\0\u52bf\0\u5304"+
    "\0\u5349\0\u538e\0\u53d3\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c"+
    "\0\u0114\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f"+
    "\0\u5754\0\u5799\0\u0114\0\u0114\0\u57de\0\u5823\0\u5868\0\u58ad"+
    "\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5"+
    "\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd"+
    "\0\u5d42\0\u5d87\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\212"+
    "\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u6108"+
    "\0\u614d\0\u6192\0\u61d7\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330"+
    "\0\u6375\0\u63ba\0\u63ff\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558"+
    "\0\u659d\0\u65e2\0\u6627\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u6780"+
    "\0\u67c5\0\u680a\0\u684f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[507];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\3\6\1\5\1\7\1\5\1\10"+
    "\1\11\2\5\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\5\1\32\1\33\1\34"+
    "\2\5\1\35\1\36\1\4\3\5\1\4\1\5\1\37"+
    "\1\40\1\4\1\5\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\3\2\4\2\5"+
    "\1\63\1\64\1\65\1\5\1\7\1\5\1\66\1\11"+
    "\2\5\1\12\1\5\1\13\1\14\1\15\1\67\1\17"+
    "\1\70\1\71\1\22\1\23\1\72\1\25\1\26\1\73"+
    "\1\30\1\4\1\31\1\5\1\32\1\74\1\34\2\5"+
    "\1\35\1\36\1\4\3\5\1\4\1\5\1\37\1\75"+
    "\1\4\1\5\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\106\0\2\4\5\0\1\76"+
    "\1\4\1\0\1\77\1\100\1\101\1\100\1\102\1\103"+
    "\11\0\1\76\2\0\1\103\1\0\1\4\11\0\1\4"+
    "\3\0\1\4\3\0\1\4\24\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\27\0\3\6"+
    "\76\0\1\104\1\105\5\0\1\76\1\105\1\106\1\77"+
    "\1\100\1\101\1\100\1\102\1\103\11\0\1\76\2\0"+
    "\1\103\1\0\1\105\1\0\1\106\7\0\1\105\3\0"+
    "\1\105\3\0\1\105\24\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\107\31\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\110\3\5\1\0\1\5\3\0"+
    "\1\5\1\111\2\5\1\112\26\5\2\0\2\5\23\0"+
    "\2\102\6\0\1\102\25\0\1\102\11\0\1\102\3\0"+
    "\1\102\3\0\1\102\44\0\1\113\50\0\1\114\34\0"+
    "\1\115\1\116\46\0\1\117\104\0\1\120\13\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\121\2\5"+
    "\1\122\4\5\1\123\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\124\24\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\125\2\5"+
    "\1\0\1\5\3\0\1\126\6\5\1\127\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\130\1\131\1\132\11\5\1\133\16\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\134\25\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\135\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\1\136"+
    "\1\5\1\137\4\5\1\140\23\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\141"+
    "\31\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\142\1\143\4\5\1\144\11\5\1\145"+
    "\12\5\2\0\2\5\23\0\4\5\3\0\3\5\1\146"+
    "\3\5\1\0\1\5\3\0\33\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\147"+
    "\7\5\1\150\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\151\4\5\1\152"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\153\1\154\1\155\5\5\1\156"+
    "\6\5\1\157\7\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\160\13\5\1\161"+
    "\12\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\162\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\163"+
    "\30\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\164\2\5\1\165\7\5\2\0"+
    "\2\5\27\0\1\166\1\167\170\0\1\170\104\0\1\171"+
    "\1\172\103\0\1\173\104\0\1\174\104\0\1\175\111\0"+
    "\1\176\105\0\1\177\105\0\1\200\11\0\1\64\105\0"+
    "\1\65\76\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\107\1\201\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\121\2\5"+
    "\1\122\4\5\1\202\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\203\2\5\1\0\1\5\3\0\1\126"+
    "\6\5\1\127\23\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\130\1\131\1\132\6\5"+
    "\1\204\2\5\1\133\16\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\136\1\5\1\137"+
    "\4\5\1\205\23\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\206\3\5\1\0\1\5\3\0\7\5\1\207"+
    "\5\5\1\210\2\5\1\211\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\160"+
    "\13\5\1\212\12\5\2\0\2\5\102\0\1\213\40\0"+
    "\1\214\106\0\1\214\67\0\2\102\6\0\1\102\1\0"+
    "\1\77\1\100\1\101\1\100\1\0\1\103\14\0\1\103"+
    "\1\0\1\102\11\0\1\102\3\0\1\102\3\0\1\102"+
    "\24\0\2\215\6\0\1\215\1\0\1\77\1\100\1\101"+
    "\1\100\2\0\1\215\15\0\1\215\11\0\1\215\3\0"+
    "\1\215\3\0\1\215\11\0\1\215\12\0\2\104\6\0"+
    "\1\104\1\0\1\77\1\100\1\101\1\100\1\102\1\103"+
    "\14\0\1\103\1\0\1\104\11\0\1\104\3\0\1\104"+
    "\3\0\1\104\24\0\1\104\1\105\5\0\1\76\1\105"+
    "\1\0\1\77\1\100\1\101\1\100\1\102\1\103\11\0"+
    "\1\76\2\0\1\103\1\0\1\105\11\0\1\105\3\0"+
    "\1\105\3\0\1\105\24\0\3\106\4\0\1\76\1\106"+
    "\2\0\1\106\1\0\1\106\1\0\1\106\6\0\2\106"+
    "\1\0\1\76\1\0\4\106\5\0\1\106\3\0\3\106"+
    "\1\0\1\106\3\0\1\106\24\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\24\5\1\216\6\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\217\2\5\1\220\26\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\221\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\222\3\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\22\0\5\115"+
    "\2\0\76\115\23\116\1\223\61\116\1\0\4\5\3\0"+
    "\3\5\1\224\3\5\1\0\1\5\3\0\2\5\1\225"+
    "\30\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\226\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\227"+
    "\20\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\230\25\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\231"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\232\1\233\3\5\1\234\25\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\235\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\236\24\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\237\14\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\240\26\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\241\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\242\24\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\243\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\244\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\245\30\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\246\13\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\247\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\250\31\5\2\0"+
    "\2\5\23\0\4\5\3\0\4\5\1\251\2\5\1\0"+
    "\1\5\3\0\33\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\11\5\1\252\21\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\253\14\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\254\13\5\1\255"+
    "\7\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\256\23\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\257"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\260\27\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\14\5\1\261"+
    "\16\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\262\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\10\5\1\263"+
    "\22\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\264\31\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\265"+
    "\26\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\266\25\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\267"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\270\1\271\10\5\1\272\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\32\5\1\273\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\274\30\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\275\30\5\2\0\2\5\30\0\1\167\77\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\276"+
    "\23\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\1\227\5\5\1\277\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\300\3\5\1\301\23\5\2\0\2\5\23\0"+
    "\4\5\3\0\4\5\1\302\2\5\1\0\1\5\3\0"+
    "\33\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\2\5\1\245\1\303\27\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\304\13\5\1\305\14\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\3\5\1\306\27\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\307\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\310\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\311\4\5\1\267\21\5\2\0\2\5"+
    "\23\0\2\215\6\0\1\215\1\0\1\77\1\100\1\101"+
    "\1\100\20\0\1\215\11\0\1\215\3\0\1\215\3\0"+
    "\1\215\24\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\17\5\1\312\13\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\313\26\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\314\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\16\5\1\242\14\5\2\0"+
    "\2\5\22\0\22\116\1\315\1\223\61\116\1\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\316\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\317\27\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\30\5\1\320\2\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\13\5\1\321\11\5\1\322\3\5\1\323\1\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\1\324\20\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\325\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\326\24\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\327\20\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\330\22\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\331\20\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\332\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\333\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\334\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\335\20\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\336\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\337\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\340\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\341\20\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\342\3\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\343\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\344\26\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\345\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\346\10\5\1\347\14\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\350\21\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\351\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\13\5"+
    "\1\352\11\5\1\353\3\5\1\354\1\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\355\30\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\17\5\1\356\13\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\357\24\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\360\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\361\31\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\362\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\363\20\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\1\364\20\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\365\27\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\366\24\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\367\25\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\23\5\1\216\7\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\370\25\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\371\3\5\1\0\1\5\3\0\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\372\21\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\16\5\1\373\14\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\374\21\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\375\27\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\376\30\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\377\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\4\5\1\u0100\2\5\1\0\1\5"+
    "\3\0\33\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u0101\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u0102\30\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u0103\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u0104\31\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\32\5\1\u0105\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0106"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0107\25\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0108"+
    "\30\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u0109\11\5\1\u010a\3\5\1\u010b"+
    "\1\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\u010c\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u010d"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u010e\11\5\1\u010f\3\5\1\u0110"+
    "\1\5\2\0\2\5\23\0\4\5\3\0\3\5\1\u0111"+
    "\3\5\1\0\1\5\3\0\33\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u0112"+
    "\26\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u0113\11\5\1\u0114\3\5\1\u0115"+
    "\1\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\2\5\1\u0116\30\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u0117"+
    "\11\5\1\u0118\3\5\1\u0119\1\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u011a"+
    "\31\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\u011b\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u011c"+
    "\11\5\1\u011d\3\5\1\u011e\1\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\u011f"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\33\5\2\0\1\5\1\u0120\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\2\5\1\u0121\30\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\u0122\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0123\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0124\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0125\15\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0126\15\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0127\15\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\u0128\24\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\u0129\3\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\1\u012a\20\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u012b\31\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\u012c\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u012d\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\23\5\1\u012e\7\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\2\5\1\u012f\30\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u0130\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0131\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0132\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0133\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0134\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\2\5\1\u0135\30\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\u0136\2\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0137\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u0138\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\u0139\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\4\5\1\u013a\2\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u013b\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u013c\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\14\5\1\u013d\16\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u013e\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u013f\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0140\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0141\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0142\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0143\15\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0144\15\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0145\15\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\u0146\22\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0147\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\16\5\1\u0148\14\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0149\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u014a\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u014b\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u014c\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u014d\11\5"+
    "\1\u014e\3\5\1\u014f\1\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u0150\11\5"+
    "\1\u0151\3\5\1\u0152\1\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u0153\11\5"+
    "\1\u0154\3\5\1\u0155\1\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\14\5\1\216\16\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0156\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0157\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\u0158\24\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\23\5\1\u0159\7\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\u015a\27\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u015b\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u015c\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u015d\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u015e\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u015f\31\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u0160\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\4\5\1\u0161\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0162\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u0163\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u0164\26\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\u0165\3\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\32\5\1\u0166\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0167\26\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\u0168\27\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u0169\11\5\1\u016a"+
    "\3\5\1\u016b\1\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u016c\11\5\1\u016d"+
    "\3\5\1\u016e\1\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u016f\11\5\1\u0170"+
    "\3\5\1\u0171\1\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\u0172\24\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\14\5\1\u0173\16\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\u0174\13\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\6\5\1\u0175\24\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u0176\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\u0177\30\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\20\5\1\u0178\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\u0179\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\u017a\6\5\1\u017b"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\3\5\1\u017c"+
    "\3\5\1\0\1\5\3\0\33\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\u017d"+
    "\20\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\u017e\23\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u017f"+
    "\23\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u0180\27\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0181"+
    "\30\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0182\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u0183"+
    "\23\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0184\25\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\u0185"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0186\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0187"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u0188\27\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\21\5\1\u0189"+
    "\3\5\1\u018a\3\5\1\u018b\1\5\2\0\1\u018c\1\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u018d\30\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u018e\31\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\30\5"+
    "\1\u018f\2\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u0190\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\u0191\3\5\1\0\1\5"+
    "\3\0\33\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u0192\31\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0193\25\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u0194\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\u0195\20\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u0196\24\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u0197\4\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\26\5\1\u0198\4\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u0199\4\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\7\5\1\u019a\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u019b\23\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\30\5\1\u019c\2\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u019d\23\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u019e\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\10\5"+
    "\1\u019f\22\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\22\5\1\u01a0\10\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\22\5"+
    "\1\u01a1\10\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01a2\21\5\2\0\2\5"+
    "\23\0\4\5\2\0\1\u01a3\7\5\1\0\1\5\3\0"+
    "\33\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\2\5\1\u01a4\30\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\u01a5"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\23\5\1\u01a6\7\5\2\0\2\5\23\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\23\5\1\u01a7"+
    "\7\5\2\0\2\5\31\0\1\u01a3\3\0\1\u01a8\24\0"+
    "\1\u01a9\6\0\1\u01aa\36\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\u01ab\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\u01ac\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u01ad\26\5\2\0\2\5\47\0\1\u01ae"+
    "\114\0\1\u01af\75\0\1\u01b0\57\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01b1\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\u01b2\27\5\2\0\2\5\23\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\u01b3\27\5\2\0\2\5"+
    "\72\0\1\u01b4\63\0\1\u01b5\133\0\1\u01b6\27\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u01b7\31\5"+
    "\2\0\2\5\23\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u01b8\31\5\2\0\2\5\65\0\1\u01b9"+
    "\67\0\1\u01ba\125\0\1\u01b4\36\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\24\5\1\u01bb\6\5\2\0\2\5"+
    "\23\0\4\5\3\0\7\5\1\0\1\5\3\0\24\5"+
    "\1\u01bc\6\5\2\0\2\5\31\0\1\u01bd\127\0\1\u01be"+
    "\61\0\1\u01bd\4\0\1\u01bf\7\0\1\u01c0\1\0\1\u01c1"+
    "\3\0\1\u01c2\1\0\1\u01c3\3\0\1\u01c4\1\0\1\u01c5"+
    "\102\0\1\u01b4\57\0\1\u01c6\116\0\1\u01c7\7\0\1\u01c8"+
    "\73\0\1\u01c9\6\0\1\u01ca\6\0\1\u01cb\66\0\1\u01c9"+
    "\1\0\1\u01cc\13\0\1\u01cb\66\0\1\u01c9\1\u01cd\107\0"+
    "\1\u01ce\104\0\1\u01cf\101\0\1\u01d0\105\0\1\u01d1\114\0"+
    "\1\u01d2\103\0\1\u01c8\100\0\1\u01d3\103\0\1\u01d4\107\0"+
    "\1\u01ca\76\0\1\u01d5\110\0\1\u01d6\113\0\1\u01d7\74\0"+
    "\1\u01ca\103\0\1\u01d3\114\0\1\u01d3\11\0\1\u01d3\3\0"+
    "\1\u01d3\112\0\1\u01d8\61\0\1\u01d9\57\0\1\u01d3\130\0"+
    "\1\u01da\11\0\1\u01da\3\0\1\u01da\72\0\1\u01db\104\0"+
    "\1\u01dc\102\0\1\u01d2\21\0\1\u01d8\34\0\1\u01dd\104\0"+
    "\1\u01de\126\0\1\u01df\104\0\1\u01e0\113\0\1\u01e1\104\0"+
    "\1\u01e2\105\0\1\u01e3\3\0\1\u01e4\3\0\1\u01e5\74\0"+
    "\1\u01e6\3\0\1\u01e7\3\0\1\u01e5\61\0\1\u01e8\124\0"+
    "\1\u01e9\104\0\1\u01d3\64\0\1\u01ea\124\0\1\u01eb\66\0"+
    "\1\u01ec\116\0\1\u01ed\4\0\1\u01ee\7\0\1\u01d8\55\0"+
    "\1\u01ef\123\0\1\u01f0\7\0\1\u01d8\56\0\1\u01f1\116\0"+
    "\1\u01f2\101\0\1\u01f3\75\0\1\u01d3\113\0\1\u01f4\106\0"+
    "\1\u01ed\14\0\1\u01d8\51\0\1\u01f5\120\0\1\u01f6\104\0"+
    "\1\u01f7\67\0\1\u01f8\105\0\1\u01f9\104\0\1\u01fa\101\0"+
    "\1\u01fb\133\0\1\u01f1\104\0\1\u01d3\100\0\1\u01d3\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26772];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\34\1\10\11\10\1\3\11\1\1\1\11"+
    "\11\1\1\11\1\0\1\11\1\0\11\1\2\11\2\1"+
    "\2\11\46\1\12\11\12\1\2\11\6\1\1\0\71\1"+
    "\1\11\325\1\1\0\4\1\3\0\3\1\3\0\3\1"+
    "\3\0\2\1\2\0\2\1\33\0\1\11\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[507];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 109: 
          { return PREPROCESSOR_IFNDEF;
          }
        case 146: break;
        case 76: 
          { return DMAT4_TYPE;
          }
        case 147: break;
        case 20: 
          { return RIGHT_ANGLE;
          }
        case 148: break;
        case 14: 
          { return RIGHT_BRACKET;
          }
        case 149: break;
        case 11: 
          { return LEFT_BRACE;
          }
        case 150: break;
        case 26: 
          { return UINT_CONSTANT;
          }
        case 151: break;
        case 129: 
          { return COHERENT_KEYWORD;
          }
        case 152: break;
        case 32: 
          { return DIV_ASSIGN;
          }
        case 153: break;
        case 13: 
          { return LEFT_BRACKET;
          }
        case 154: break;
        case 106: 
          { return SMOOTH_KEYWORD;
          }
        case 155: break;
        case 77: 
          { return DMAT2_TYPE;
          }
        case 156: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 157: break;
        case 75: 
          { return DVEC3_TYPE;
          }
        case 158: break;
        case 112: 
          { return VARYING_KEYWORD;
          }
        case 159: break;
        case 124: 
          { return PRECISE_KEYWORD;
          }
        case 160: break;
        case 126: 
          { return PREPROCESSOR_DEFINED;
          }
        case 161: break;
        case 73: 
          { return DVEC4_TYPE;
          }
        case 162: break;
        case 48: 
          { return DOUBLE_CONSTANT;
          }
        case 163: break;
        case 47: 
          { return PREPROCESSOR_CONCAT;
          }
        case 164: break;
        case 113: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 165: break;
        case 51: 
          { return INT_TYPE;
          }
        case 166: break;
        case 5: 
          { return DOT;
          }
        case 167: break;
        case 86: 
          { return CONST_KEYWORD;
          }
        case 168: break;
        case 60: 
          { return BOOL_TYPE;
          }
        case 169: break;
        case 9: 
          { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
          }
        case 170: break;
        case 68: 
          { return FLOAT_TYPE;
          }
        case 171: break;
        case 74: 
          { return DVEC2_TYPE;
          }
        case 172: break;
        case 127: 
          { return VOLATILE_KEYWORD;
          }
        case 173: break;
        case 130: 
          { return CENTROID_KEYWORD;
          }
        case 174: break;
        case 1: 
          { return UNKNOWN;
          }
        case 175: break;
        case 61: 
          { return ELSE_KEYWORD;
          }
        case 176: break;
        case 65: 
          { return PREPROCESSOR_LINE;
          }
        case 177: break;
        case 116: 
          { return DMAT4X3_TYPE;
          }
        case 178: break;
        case 42: 
          { return NE_OP;
          }
        case 179: break;
        case 95: 
          { return MAT4X4_TYPE;
          }
        case 180: break;
        case 114: 
          { return DMAT4X4_TYPE;
          }
        case 181: break;
        case 10: 
          { return SEMICOLON;
          }
        case 182: break;
        case 137: 
          { return SAMPLER1D_TYPE;
          }
        case 183: break;
        case 15: 
          { return LEFT_PAREN;
          }
        case 184: break;
        case 96: 
          { return MAT4X2_TYPE;
          }
        case 185: break;
        case 67: 
          { return PREPROCESSOR_ELSE;
          }
        case 186: break;
        case 115: 
          { return DMAT4X2_TYPE;
          }
        case 187: break;
        case 107: 
          { return SHARED_KEYWORD;
          }
        case 188: break;
        case 66: 
          { return PREPROCESSOR_ELIF;
          }
        case 189: break;
        case 97: 
          { return MAT4X3_TYPE;
          }
        case 190: break;
        case 94: 
          { return BUFFER_KEYWORD;
          }
        case 191: break;
        case 81: 
          { return UVEC3_TYPE;
          }
        case 192: break;
        case 92: 
          { return PREPROCESSOR_ERROR;
          }
        case 193: break;
        case 87: 
          { return PATCH_KEYWORD;
          }
        case 194: break;
        case 79: 
          { return UVEC4_TYPE;
          }
        case 195: break;
        case 143: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 196: break;
        case 36: 
          { return DO_KEYWORD;
          }
        case 197: break;
        case 41: 
          { return GE_OP;
          }
        case 198: break;
        case 12: 
          { return RIGHT_BRACE;
          }
        case 199: break;
        case 93: 
          { return DOUBLE_TYPE;
          }
        case 200: break;
        case 22: 
          { return QUESTION;
          }
        case 201: break;
        case 142: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 202: break;
        case 80: 
          { return UVEC2_TYPE;
          }
        case 203: break;
        case 71: 
          { return IVEC3_TYPE;
          }
        case 204: break;
        case 38: 
          { return ADD_ASSIGN;
          }
        case 205: break;
        case 133: 
          { return INVARIANT_KEYWORD;
          }
        case 206: break;
        case 6: 
          { return DASH;
          }
        case 207: break;
        case 69: 
          { return IVEC4_TYPE;
          }
        case 208: break;
        case 46: 
          { return PREPROCESSOR_IF;
          }
        case 209: break;
        case 54: 
          { return VOID_TYPE;
          }
        case 210: break;
        case 58: 
          { return BOOL_CONSTANT;
          }
        case 211: break;
        case 91: 
          { return PREPROCESSOR_ENDIF;
          }
        case 212: break;
        case 88: 
          { return WHILE_KEYWORD;
          }
        case 213: break;
        case 70: 
          { return IVEC2_TYPE;
          }
        case 214: break;
        case 128: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 215: break;
        case 37: 
          { return EQ_OP;
          }
        case 216: break;
        case 132: 
          { return RESTRICT_KEYWORD;
          }
        case 217: break;
        case 30: 
          { return COMMENT_LINE;
          }
        case 218: break;
        case 18: 
          { return PLUS;
          }
        case 219: break;
        case 119: 
          { return DMAT2X3_TYPE;
          }
        case 220: break;
        case 31: 
          { return COMMENT_BLOCK;
          }
        case 221: break;
        case 52: 
          { return PRECISION_KEYWORD;
          }
        case 222: break;
        case 98: 
          { return MAT2X4_TYPE;
          }
        case 223: break;
        case 117: 
          { return DMAT2X4_TYPE;
          }
        case 224: break;
        case 59: 
          { return UINT_TYPE;
          }
        case 225: break;
        case 135: 
          { return SAMPLER2D_TYPE;
          }
        case 226: break;
        case 111: 
          { return PREPROCESSOR_PRAGMA;
          }
        case 227: break;
        case 49: 
          { return FOR_KEYWORD;
          }
        case 228: break;
        case 90: 
          { return PREPROCESSOR_UNDEF;
          }
        case 229: break;
        case 23: 
          { return COLON;
          }
        case 230: break;
        case 19: 
          { return LEFT_ANGLE;
          }
        case 231: break;
        case 123: 
          { return UNIFORM_KEYWORD;
          }
        case 232: break;
        case 99: 
          { return MAT2X2_TYPE;
          }
        case 233: break;
        case 118: 
          { return DMAT2X2_TYPE;
          }
        case 234: break;
        case 100: 
          { return MAT2X3_TYPE;
          }
        case 235: break;
        case 33: 
          { return MUL_ASSIGN;
          }
        case 236: break;
        case 21: 
          { return BANG;
          }
        case 237: break;
        case 45: 
          { return XOR_OP;
          }
        case 238: break;
        case 7: 
          { return SLASH;
          }
        case 239: break;
        case 53: 
          { return FLAT_KEYWORD;
          }
        case 240: break;
        case 138: 
          { return WRITEONLY_KEYWORD;
          }
        case 241: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 242: break;
        case 105: 
          { return STRUCT;
          }
        case 243: break;
        case 110: 
          { return PREPROCESSOR_DEFINE;
          }
        case 244: break;
        case 35: 
          { return IN_KEYWORD;
          }
        case 245: break;
        case 8: 
          { return STAR;
          }
        case 246: break;
        case 62: 
          { return MAT4_TYPE;
          }
        case 247: break;
        case 139: 
          { return PREPROCESSOR_EXTENSION;
          }
        case 248: break;
        case 40: 
          { return LE_OP;
          }
        case 249: break;
        case 28: 
          { return DEC_OP;
          }
        case 250: break;
        case 108: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 251: break;
        case 63: 
          { return MAT2_TYPE;
          }
        case 252: break;
        case 125: 
          { return PREPROCESSOR_VERSION;
          }
        case 253: break;
        case 16: 
          { return RIGHT_PAREN;
          }
        case 254: break;
        case 64: 
          { return MAT3_TYPE;
          }
        case 255: break;
        case 104: 
          { return SAMPLE_KEYWORD;
          }
        case 256: break;
        case 55: 
          { return VEC4_TYPE;
          }
        case 257: break;
        case 17: 
          { return EQUAL;
          }
        case 258: break;
        case 43: 
          { return AND_OP;
          }
        case 259: break;
        case 44: 
          { return OR_OP;
          }
        case 260: break;
        case 89: 
          { return PREPROCESSOR_IFDEF;
          }
        case 261: break;
        case 131: 
          { return READONLY_KEYWORD;
          }
        case 262: break;
        case 56: 
          { return VEC2_TYPE;
          }
        case 263: break;
        case 25: 
          { yybegin(YYINITIAL); return PREPROCESSOR_END;
          }
        case 264: break;
        case 50: 
          { return OUT_KEYWORD;
          }
        case 265: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 266: break;
        case 136: 
          { return SAMPLER3D_TYPE;
          }
        case 267: break;
        case 57: 
          { return VEC3_TYPE;
          }
        case 268: break;
        case 34: 
          { return IF_KEYWORD;
          }
        case 269: break;
        case 29: 
          { return SUB_ASSIGN;
          }
        case 270: break;
        case 122: 
          { return DMAT3X3_TYPE;
          }
        case 271: break;
        case 101: 
          { return MAT3X4_TYPE;
          }
        case 272: break;
        case 24: 
          { return COMMA;
          }
        case 273: break;
        case 85: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 274: break;
        case 120: 
          { return DMAT3X4_TYPE;
          }
        case 275: break;
        case 82: 
          { return BVEC4_TYPE;
          }
        case 276: break;
        case 141: 
          { return SAMPLERCUBE_TYPE;
          }
        case 277: break;
        case 27: 
          { return FLOAT_CONSTANT;
          }
        case 278: break;
        case 140: 
          { return SUBROUTINE_KEYWORD;
          }
        case 279: break;
        case 145: 
          { return PRECISION_STATEMENT;
          }
        case 280: break;
        case 39: 
          { return INC_OP;
          }
        case 281: break;
        case 72: 
          { return INOUT_KEYWORD;
          }
        case 282: break;
        case 134: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 283: break;
        case 102: 
          { return MAT3X2_TYPE;
          }
        case 284: break;
        case 121: 
          { return DMAT3X2_TYPE;
          }
        case 285: break;
        case 83: 
          { return BVEC2_TYPE;
          }
        case 286: break;
        case 103: 
          { return MAT3X3_TYPE;
          }
        case 287: break;
        case 84: 
          { return BVEC3_TYPE;
          }
        case 288: break;
        case 144: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 289: break;
        case 78: 
          { return DMAT3_TYPE;
          }
        case 290: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
