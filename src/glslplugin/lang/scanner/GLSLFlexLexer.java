/* The following code was generated by JFlex 1.4.3 on 20/04/15 11:03 */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/04/15 11:03 from the specification file
 * <tt>/home/abigail/glsl4idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\15\1\0\1\5\1\15\22\0\1\5\1\71\1\0"+
    "\1\100\2\0\1\72\1\0\1\63\1\64\1\16\1\66\1\77\1\13"+
    "\1\11\1\14\1\6\1\54\1\46\1\52\1\34\3\2\2\1\1\76"+
    "\1\56\1\67\1\65\1\70\1\75\1\0\1\50\1\3\1\42\1\47"+
    "\1\12\1\10\14\4\1\43\4\4\1\7\2\4\1\61\1\0\1\62"+
    "\1\74\1\4\1\0\1\25\1\31\1\33\1\22\1\32\1\23\1\53"+
    "\1\44\1\21\1\4\1\55\1\24\1\35\1\30\1\20\1\40\1\4"+
    "\1\41\1\37\1\26\1\27\1\17\1\45\1\36\1\51\1\4\1\57"+
    "\1\73\1\60\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\23\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\3\1"+
    "\1\25\1\26\1\27\1\30\4\31\2\2\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\5\3\1\40\1\41\1\42"+
    "\35\3\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\4\30\1\31\1\0\4\3\1\54\3\3"+
    "\1\55\1\3\1\56\37\3\3\30\1\35\1\57\2\3"+
    "\1\60\1\61\1\62\5\3\1\63\1\64\1\3\1\65"+
    "\3\3\1\66\2\3\1\67\4\3\1\70\1\71\1\72"+
    "\15\3\3\30\2\3\1\73\1\74\1\75\1\3\1\76"+
    "\1\3\1\77\3\3\1\100\1\101\1\102\1\3\1\103"+
    "\1\3\1\104\13\3\1\105\5\3\1\106\3\30\7\3"+
    "\1\107\3\3\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\3\1\123\1\124"+
    "\2\3\1\125\2\3\3\30\1\3\1\126\1\3\1\127"+
    "\1\3\1\130\7\3\1\131\3\3\2\30\1\132\1\133"+
    "\3\3\1\134\1\135\1\136\6\3\1\137\1\140\1\3"+
    "\1\141\1\30\1\142\1\143\2\3\1\144\1\145\1\146"+
    "\2\3\1\147\1\30\4\3\1\150\1\0\1\151\1\3"+
    "\1\152\2\3\3\0\3\3\3\0\1\153\2\3\3\0"+
    "\2\3\2\0\1\154\1\155\33\0\1\156\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\u075d\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u0924\0\101\0\101\0\101\0\u0965"+
    "\0\101\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\101\0\101"+
    "\0\u0aeb\0\u0b2c\0\101\0\101\0\u0b6d\0\u0bae\0\u0bef\0\u0c30"+
    "\0\u0c71\0\303\0\u0cb2\0\303\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\101\0\101\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\303\0\u16da\0\u171b\0\u175c"+
    "\0\303\0\u179d\0\303\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\101\0\303\0\u2080"+
    "\0\u20c1\0\303\0\303\0\303\0\u2102\0\u2143\0\u2184\0\u21c5"+
    "\0\u2206\0\303\0\303\0\u2247\0\303\0\u2288\0\u22c9\0\u230a"+
    "\0\303\0\u234b\0\u238c\0\303\0\u23cd\0\u240e\0\u244f\0\u2490"+
    "\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\303\0\303\0\303"+
    "\0\u2a26\0\303\0\u2a67\0\303\0\u2aa8\0\u2ae9\0\u2b2a\0\303"+
    "\0\303\0\303\0\u2b6b\0\303\0\u2bac\0\303\0\u2bed\0\u2c2e"+
    "\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36"+
    "\0\u2e77\0\303\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\303"+
    "\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4"+
    "\0\u3205\0\u3246\0\303\0\u3287\0\u32c8\0\u3309\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\u334a"+
    "\0\303\0\u338b\0\303\0\303\0\u33cc\0\u340d\0\303\0\u344e"+
    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\303\0\u35d4\0\303"+
    "\0\u3615\0\303\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b"+
    "\0\u37dc\0\303\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962"+
    "\0\303\0\u39a3\0\u39e4\0\u3a25\0\303\0\303\0\303\0\u3a66"+
    "\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\303\0\303\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\303\0\303\0\u3caf\0\u3cf0\0\u3d31\0\303"+
    "\0\u3d72\0\u3db3\0\u3df4\0\303\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\u3f39\0\303\0\u3f7a\0\u3fbb\0\u3ffc\0\303\0\u403d\0\u407e"+
    "\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286"+
    "\0\u42c7\0\303\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d"+
    "\0\u448e\0\u44cf\0\u4510\0\303\0\303\0\u4551\0\u4592\0\u45d3"+
    "\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db"+
    "\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3"+
    "\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb"+
    "\0\101\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2"+
    "\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba"+
    "\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2"+
    "\0\u5203\0\u5244\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca"+
    "\0\u540b\0\u544c\0\u548d\0\u54ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\2\4\1\5\1\6\2\4\1\7\1\4"+
    "\1\10\1\11\1\5\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\3\1\30\1\4\1\31\1\32\1\33\2\4"+
    "\1\34\1\35\1\3\3\4\1\3\1\4\1\3\1\4"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\102\0\2\3\3\0\1\3\1\0"+
    "\1\61\1\62\1\63\10\0\1\61\6\0\1\63\1\0"+
    "\1\3\11\0\1\3\3\0\1\3\1\0\1\3\25\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\37\4\30\0"+
    "\1\5\7\0\1\5\64\0\1\64\1\65\3\0\1\65"+
    "\1\66\1\61\1\62\1\63\10\0\1\61\6\0\1\63"+
    "\1\0\1\65\1\0\1\66\7\0\1\65\3\0\1\65"+
    "\1\0\1\65\25\0\2\62\3\0\1\62\25\0\1\62"+
    "\11\0\1\62\3\0\1\62\1\0\1\62\37\0\1\67"+
    "\51\0\1\70\27\0\1\71\1\0\1\72\46\0\1\73"+
    "\100\0\1\74\14\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\4\1\75\4\4\1\76\4\4\1\77\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\10\4"+
    "\1\100\26\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\101\3\4\1\102\4\4\1\103\25\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\1\4\1\104"+
    "\1\105\34\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\4\1\106\3\4\1\107\1\110\30\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\1\4\1\111"+
    "\35\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\7\4\1\112\27\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\22\4\1\113\14\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\11\4\1\114\25\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\1\4\1\115"+
    "\35\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\1\116\1\117\6\4\1\120\11\4\1\121\14\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\5\4\1\122"+
    "\31\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\1\4\1\123\11\4\1\124\23\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\6\4\1\125\4\4\1\126"+
    "\23\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\6\4\1\127\1\130\1\131\5\4\1\132\6\4\1\133"+
    "\11\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\6\4\1\134\13\4\1\135\14\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\13\4\1\136\23\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\2\4\1\137"+
    "\34\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\22\4\1\140\2\4\1\141\11\4\110\0\1\142\100\0"+
    "\1\143\1\144\77\0\1\145\100\0\1\146\100\0\1\147"+
    "\105\0\1\150\101\0\1\151\101\0\1\152\4\0\5\153"+
    "\1\60\7\153\1\60\1\153\1\154\12\153\1\155\5\153"+
    "\1\156\40\153\1\0\2\62\3\0\1\62\1\0\1\61"+
    "\1\0\1\63\10\0\1\61\6\0\1\63\1\0\1\62"+
    "\11\0\1\62\3\0\1\62\1\0\1\62\25\0\2\157"+
    "\3\0\1\157\1\0\1\61\2\0\1\157\7\0\1\61"+
    "\10\0\1\157\11\0\1\157\3\0\1\157\1\0\1\157"+
    "\11\0\1\157\13\0\2\64\3\0\1\64\1\0\1\61"+
    "\1\62\1\63\10\0\1\61\6\0\1\63\1\0\1\64"+
    "\11\0\1\64\3\0\1\64\1\0\1\64\25\0\1\64"+
    "\1\65\3\0\1\65\1\0\1\61\1\62\1\63\10\0"+
    "\1\61\6\0\1\63\1\0\1\65\11\0\1\65\3\0"+
    "\1\65\1\0\1\65\25\0\3\66\2\0\1\66\1\0"+
    "\1\66\1\0\1\66\7\0\2\66\1\0\1\66\3\0"+
    "\4\66\5\0\1\66\3\0\3\66\1\0\1\66\1\0"+
    "\1\66\24\0\15\71\1\0\63\71\16\72\1\160\62\72"+
    "\1\0\4\4\1\0\3\4\1\0\1\4\4\0\2\4"+
    "\1\161\2\4\1\162\31\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\22\4\1\163\14\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\14\4\1\164\22\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\7\4"+
    "\1\165\27\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\13\4\1\166\23\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\1\167\1\170\5\4\1\171\27\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\20\4"+
    "\1\172\16\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\22\4\1\173\14\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\1\4\1\174\4\4\1\175\30\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\5\4"+
    "\1\176\31\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\26\4\1\177\10\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\7\4\1\200\27\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\10\4\1\201\26\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\2\4"+
    "\1\202\34\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\21\4\1\203\15\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\13\4\1\204\23\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\1\4\1\205\35\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\4\4"+
    "\1\206\32\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\13\4\1\207\23\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\20\4\1\210\16\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\11\4\1\211\13\4"+
    "\1\212\11\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\11\4\1\213\25\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\7\4\1\214\27\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\3\4\1\215\33\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\16\4"+
    "\1\216\20\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\22\4\1\217\14\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\12\4\1\220\24\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\1\4\1\221\35\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\6\4"+
    "\1\222\30\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\7\4\1\223\27\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\13\4\1\224\23\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\6\4\1\225\1\226"+
    "\10\4\1\227\16\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\34\4\1\230\2\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\2\4\1\231\34\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\2\4\1\232"+
    "\34\4\23\0\15\153\1\0\100\153\1\0\14\153\1\233"+
    "\63\153\1\0\20\153\1\234\57\153\1\0\23\153\1\235"+
    "\37\153\1\0\2\157\3\0\1\157\1\0\1\61\12\0"+
    "\1\61\10\0\1\157\11\0\1\157\3\0\1\157\1\0"+
    "\1\157\24\0\14\72\1\236\1\72\1\160\62\72\1\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\3\4\1\237"+
    "\33\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\6\4\1\240\30\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\32\4\1\241\4\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\15\4\1\242\11\4\1\243"+
    "\3\4\1\244\3\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\14\4\1\245\22\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\6\4\1\246\30\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\10\4\1\247"+
    "\26\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\14\4\1\250\22\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\6\4\1\251\30\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\7\4\1\252\27\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\20\4\1\201"+
    "\16\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\21\4\1\253\15\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\22\4\1\254\14\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\13\4\1\255\23\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\4\4\1\256"+
    "\32\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\13\4\1\257\23\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\14\4\1\260\22\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\5\4\1\261\31\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\4\4\1\262"+
    "\32\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\6\4\1\263\30\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\13\4\1\264\23\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\7\4\1\265\10\4\1\266"+
    "\16\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\13\4\1\267\23\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\7\4\1\270\27\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\15\4\1\271\11\4\1\272"+
    "\3\4\1\273\3\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\2\4\1\274\34\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\21\4\1\275\15\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\10\4\1\276"+
    "\26\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\22\4\1\277\14\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\1\4\1\300\35\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\22\4\1\301\14\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\14\4\1\302"+
    "\22\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\14\4\1\303\22\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\3\4\1\304\33\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\10\4\1\305\26\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\7\4\1\306"+
    "\27\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\25\4\1\177\11\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\7\4\1\307\27\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\5\4\1\310\31\4\23\0"+
    "\15\153\1\0\23\153\1\311\54\153\1\0\10\153\1\312"+
    "\67\153\1\0\7\153\1\313\53\153\1\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\7\4\1\314\27\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\2\4\1\315"+
    "\34\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\15\4\1\316\11\4\1\317\3\4\1\320\3\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\22\4\1\321"+
    "\14\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\7\4\1\322\27\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\6\4\1\323\30\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\7\4\1\324\27\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\2\4\1\325"+
    "\34\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\1\4\1\326\35\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\22\4\1\327\14\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\15\4\1\330\11\4\1\331"+
    "\3\4\1\332\3\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\13\4\1\333\23\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\36\4\1\334\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\2\4\1\335\34\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\7\4"+
    "\1\336\27\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\22\4\1\337\14\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\22\4\1\340\14\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\17\4\1\341\17\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\17\4"+
    "\1\342\17\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\17\4\1\343\17\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\10\4\1\344\26\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\5\4\1\345\31\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\14\4"+
    "\1\346\22\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\4\1\347\35\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\7\4\1\350\27\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\13\4\1\351\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\25\4"+
    "\1\352\11\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\2\4\1\353\34\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\1\4\1\354\35\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\22\4\1\355\14\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\22\4"+
    "\1\356\14\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\13\4\1\357\23\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\13\4\1\360\23\4\23\0\15\153"+
    "\1\0\21\153\1\361\56\153\1\0\14\153\1\362\63\153"+
    "\1\0\35\153\1\363\25\153\1\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\2\4\1\364\34\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\11\4\1\365\25\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\2\4"+
    "\1\366\34\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\22\4\1\367\14\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\12\4\1\370\24\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\22\4\1\371\14\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\20\4"+
    "\1\372\16\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\22\4\1\373\14\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\11\4\1\374\25\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\13\4\1\375\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\1\4"+
    "\1\376\35\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\15\4\1\377\11\4\1\u0100\3\4\1\u0101\3\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\15\4"+
    "\1\u0102\11\4\1\u0103\3\4\1\u0104\3\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\15\4\1\u0105\11\4"+
    "\1\u0106\3\4\1\u0107\3\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\16\4\1\177\20\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\13\4\1\u0108\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\7\4"+
    "\1\u0109\27\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\10\4\1\u010a\26\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\25\4\1\u010b\11\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\3\4\1\u010c\33\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\20\4"+
    "\1\u010d\16\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\11\4\1\u010e\25\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\11\4\1\u010f\25\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\2\4\1\u0110\34\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\1\4"+
    "\1\u0111\35\4\23\0\15\153\1\0\3\153\1\u0112\74\153"+
    "\1\0\12\153\1\u0113\65\153\1\0\17\153\1\u0114\43\153"+
    "\1\0\4\4\1\0\3\4\1\0\1\4\4\0\5\4"+
    "\1\u0115\31\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\34\4\1\u0116\2\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\6\4\1\u0117\30\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\3\4\1\u0118\33\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\10\4"+
    "\1\u0119\26\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\16\4\1\u011a\20\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\21\4\1\u011b\15\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\10\4\1\u011c\26\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\11\4"+
    "\1\u011d\25\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\2\4\1\u011e\34\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\22\4\1\u011f\14\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\7\4\1\u0120\27\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\2\4"+
    "\1\u0121\10\4\1\u0122\23\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\5\4\1\u0123\31\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\14\4\1\u0124\22\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\11\4"+
    "\1\u0125\25\4\23\0\15\153\1\0\2\153\1\u0126\75\153"+
    "\1\0\21\153\1\u0127\56\153\1\0\7\153\1\u0128\53\153"+
    "\1\0\4\4\1\0\3\4\1\0\1\4\4\0\13\4"+
    "\1\u0129\23\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\11\4\1\u012a\25\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\7\4\1\u012b\27\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\13\4\1\u012c\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\13\4"+
    "\1\u012d\23\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\7\4\1\u012e\27\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\3\4\1\u012f\33\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\23\4\1\u0130\3\4"+
    "\1\u0131\3\4\1\u0132\1\4\1\u0133\1\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\2\4\1\u0134\34\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\1\4"+
    "\1\u0135\35\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\32\4\1\u0136\4\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\7\4\1\u0137\27\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\5\4\1\u0138\31\4"+
    "\23\0\15\153\1\0\12\153\1\u0139\65\153\1\0\3\153"+
    "\1\u013a\57\153\15\u0128\1\0\63\u0128\1\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\7\4\1\u013b\27\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\13\4\1\u013c"+
    "\23\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\14\4\1\u013d\22\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\10\4\1\u013e\26\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\30\4\1\u013f\6\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\30\4\1\u0140"+
    "\6\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\30\4\1\u0141\6\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\11\4\1\u0142\25\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\11\4\1\u0143\25\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\32\4\1\u0144"+
    "\4\4\23\0\15\u0139\1\0\63\u0139\15\153\1\0\2\153"+
    "\1\u0145\60\153\1\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\7\4\1\u0146\27\4\24\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\12\4\1\u0147\24\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\24\4\1\u0148\12\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\24\4"+
    "\1\u0149\12\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\13\4\1\u014a\23\4\24\0\4\4\1\u014b\3\4"+
    "\1\0\1\4\2\0\1\u014b\1\0\37\4\23\0\15\153"+
    "\1\0\12\153\1\u014c\50\153\1\0\4\4\1\0\3\4"+
    "\1\0\1\4\4\0\2\4\1\u014d\34\4\24\0\4\4"+
    "\1\0\3\4\1\0\1\4\4\0\13\4\1\u014e\23\4"+
    "\24\0\4\4\1\0\3\4\1\0\1\4\4\0\25\4"+
    "\1\u014f\11\4\24\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\25\4\1\u0150\11\4\30\0\1\u014b\7\0\1\u014b"+
    "\6\0\1\u0151\10\0\1\u0152\6\0\1\u0153\34\0\15\u014c"+
    "\1\0\63\u014c\1\0\4\4\1\0\3\4\1\0\1\4"+
    "\4\0\1\u0154\36\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\6\4\1\u0155\30\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\6\4\1\u0156\30\4\43\0"+
    "\1\u0157\112\0\1\u0158\67\0\1\u0159\60\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\13\4\1\u015a\23\4\24\0"+
    "\4\4\1\0\3\4\1\0\1\4\4\0\3\4\1\u015b"+
    "\33\4\24\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\3\4\1\u015c\33\4\70\0\1\u015d\55\0\1\u015e\131\0"+
    "\1\u015f\26\0\4\4\1\0\3\4\1\0\1\4\4\0"+
    "\1\4\1\u0160\35\4\24\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\1\4\1\u0161\35\4\63\0\1\u0162\61\0"+
    "\1\u0163\123\0\1\u015d\35\0\4\4\1\0\3\4\1\0"+
    "\1\4\4\0\26\4\1\u0164\10\4\24\0\4\4\1\0"+
    "\3\4\1\0\1\4\4\0\26\4\1\u0165\10\4\30\0"+
    "\1\u0166\7\0\1\u0166\112\0\1\u0167\56\0\1\u0166\7\0"+
    "\1\u0166\1\0\1\u0168\1\0\1\u0169\1\0\1\u016a\3\0"+
    "\1\u016b\1\0\1\u016c\3\0\1\u016d\1\0\1\u016e\76\0"+
    "\1\u015d\63\0\1\u016f\11\0\1\u0170\65\0\1\u0171\10\0"+
    "\1\u0172\6\0\1\u0173\65\0\1\u0174\73\0\1\u0171\1\0"+
    "\1\u0175\15\0\1\u0173\60\0\1\u0171\1\u0176\105\0\1\u0177"+
    "\100\0\1\u0178\74\0\1\u0179\112\0\1\u017a\77\0\1\u0170"+
    "\74\0\1\u017b\77\0\1\u017c\73\0\1\u017d\110\0\1\u0172"+
    "\70\0\1\u017e\106\0\1\u017f\107\0\1\u0180\65\0\1\u017b"+
    "\112\0\1\u017b\11\0\1\u017b\3\0\1\u017b\104\0\1\u0181"+
    "\57\0\1\u0182\70\0\1\u0172\77\0\1\u017b\110\0\1\u0183"+
    "\11\0\1\u0183\3\0\1\u0183\66\0\1\u0184\100\0\1\u0185"+
    "\76\0\1\u017a\17\0\1\u0181\46\0\1\u0186\100\0\1\u0187"+
    "\106\0\1\u0188\100\0\1\u0189\107\0\1\u018a\100\0\1\u018b"+
    "\101\0\1\u018c\3\0\1\u018d\3\0\1\u018e\70\0\1\u018f"+
    "\3\0\1\u0190\3\0\1\u018e\55\0\1\u0191\120\0\1\u0192"+
    "\100\0\1\u017b\60\0\1\u0193\120\0\1\u0194\62\0\1\u0195"+
    "\112\0\1\u0196\4\0\1\u0197\5\0\1\u0181\53\0\1\u0198"+
    "\117\0\1\u0199\5\0\1\u0181\54\0\1\u019a\112\0\1\u019b"+
    "\75\0\1\u019c\71\0\1\u017b\107\0\1\u019d\102\0\1\u0196"+
    "\12\0\1\u0181\47\0\1\u019e\114\0\1\u019f\100\0\1\u01a0"+
    "\61\0\1\u01a1\103\0\1\u01a2\100\0\1\u01a3\73\0\1\u01a4"+
    "\131\0\1\u019a\100\0\1\u017b\74\0\1\u017b\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21775];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\7\11\10\1\3\11\1\1\1\11"+
    "\5\1\2\11\2\1\2\11\45\1\11\11\5\1\1\0"+
    "\55\1\1\11\254\1\1\0\5\1\3\0\3\1\3\0"+
    "\3\1\3\0\2\1\2\0\2\1\33\0\1\11\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return IDENTIFIER;
          }
        case 111: break;
        case 100: 
          { return SAMPLER2D_TYPE;
          }
        case 112: break;
        case 59: 
          { return IVEC4_TYPE;
          }
        case 113: break;
        case 86: 
          { return VARYING_KEYWORD;
          }
        case 114: break;
        case 91: 
          { return VOLATILE_KEYWORD;
          }
        case 115: break;
        case 26: 
          { return DEC_OP;
          }
        case 116: break;
        case 33: 
          { return IN_KEYWORD;
          }
        case 117: break;
        case 29: 
          { return COMMENT_BLOCK;
          }
        case 118: break;
        case 96: 
          { return RESTRICT_KEYWORD;
          }
        case 119: break;
        case 21: 
          { return QUESTION;
          }
        case 120: break;
        case 16: 
          { return EQUAL;
          }
        case 121: break;
        case 48: 
          { return VEC4_TYPE;
          }
        case 122: break;
        case 83: 
          { return SMOOTH_KEYWORD;
          }
        case 123: break;
        case 80: 
          { return MAT3X3_TYPE;
          }
        case 124: break;
        case 18: 
          { return LEFT_ANGLE;
          }
        case 125: break;
        case 22: 
          { return COLON;
          }
        case 126: break;
        case 61: 
          { return IVEC3_TYPE;
          }
        case 127: break;
        case 94: 
          { return CENTROID_KEYWORD;
          }
        case 128: break;
        case 44: 
          { return OUT_KEYWORD;
          }
        case 129: break;
        case 87: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 130: break;
        case 93: 
          { return COHERENT_KEYWORD;
          }
        case 131: break;
        case 79: 
          { return MAT3X2_TYPE;
          }
        case 132: break;
        case 68: 
          { return CONST_KEYWORD;
          }
        case 133: break;
        case 64: 
          { return BVEC4_TYPE;
          }
        case 134: break;
        case 6: 
          { return DASH;
          }
        case 135: break;
        case 43: 
          { return XOR_OP;
          }
        case 136: break;
        case 35: 
          { return EQ_OP;
          }
        case 137: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 138: break;
        case 92: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 139: break;
        case 13: 
          { return RIGHT_BRACKET;
          }
        case 140: break;
        case 11: 
          { return RIGHT_BRACE;
          }
        case 141: break;
        case 9: 
          { return SEMICOLON;
          }
        case 142: break;
        case 67: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 143: break;
        case 72: 
          { return MAT4X4_TYPE;
          }
        case 144: break;
        case 23: 
          { return COMMA;
          }
        case 145: break;
        case 50: 
          { return VEC3_TYPE;
          }
        case 146: break;
        case 99: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 147: break;
        case 36: 
          { return ADD_ASSIGN;
          }
        case 148: break;
        case 75: 
          { return MAT2X4_TYPE;
          }
        case 149: break;
        case 82: 
          { return STRUCT;
          }
        case 150: break;
        case 56: 
          { return MAT4_TYPE;
          }
        case 151: break;
        case 60: 
          { return IVEC2_TYPE;
          }
        case 152: break;
        case 17: 
          { return PLUS;
          }
        case 153: break;
        case 25: 
          { return FLOAT_CONSTANT;
          }
        case 154: break;
        case 101: 
          { return SAMPLER3D_TYPE;
          }
        case 155: break;
        case 49: 
          { return VEC2_TYPE;
          }
        case 156: break;
        case 106: 
          { return SAMPLERCUBE_TYPE;
          }
        case 157: break;
        case 66: 
          { return BVEC3_TYPE;
          }
        case 158: break;
        case 98: 
          { return INVARIANT_KEYWORD;
          }
        case 159: break;
        case 5: 
          { return DOT;
          }
        case 160: break;
        case 27: 
          { return SUB_ASSIGN;
          }
        case 161: break;
        case 54: 
          { return BOOL_TYPE;
          }
        case 162: break;
        case 63: 
          { return FLOAT_TYPE;
          }
        case 163: break;
        case 71: 
          { return BUFFER_KEYWORD;
          }
        case 164: break;
        case 46: 
          { return FOR_KEYWORD;
          }
        case 165: break;
        case 37: 
          { return INC_OP;
          }
        case 166: break;
        case 102: 
          { return SAMPLER1D_TYPE;
          }
        case 167: break;
        case 74: 
          { return MAT4X3_TYPE;
          }
        case 168: break;
        case 24: 
          { return COMPILER_DIRECTIVE_OTHER;
          }
        case 169: break;
        case 53: 
          { return BOOL_CONSTANT;
          }
        case 170: break;
        case 1: 
          { return UNKNOWN;
          }
        case 171: break;
        case 77: 
          { return MAT2X3_TYPE;
          }
        case 172: break;
        case 38: 
          { return LE_OP;
          }
        case 173: break;
        case 30: 
          { return DIV_ASSIGN;
          }
        case 174: break;
        case 34: 
          { return DO_KEYWORD;
          }
        case 175: break;
        case 65: 
          { return BVEC2_TYPE;
          }
        case 176: break;
        case 55: 
          { return ELSE_KEYWORD;
          }
        case 177: break;
        case 42: 
          { return OR_OP;
          }
        case 178: break;
        case 15: 
          { return RIGHT_PAREN;
          }
        case 179: break;
        case 10: 
          { return LEFT_BRACE;
          }
        case 180: break;
        case 58: 
          { return MAT3_TYPE;
          }
        case 181: break;
        case 88: 
          { return UNIFORM_KEYWORD;
          }
        case 182: break;
        case 108: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 183: break;
        case 73: 
          { return MAT4X2_TYPE;
          }
        case 184: break;
        case 103: 
          { return WRITEONLY_KEYWORD;
          }
        case 185: break;
        case 47: 
          { return VOID_TYPE;
          }
        case 186: break;
        case 110: 
          { return PRECISION_STATEMENT;
          }
        case 187: break;
        case 76: 
          { return MAT2X2_TYPE;
          }
        case 188: break;
        case 89: 
          { return PRECISE_KEYWORD;
          }
        case 189: break;
        case 52: 
          { return PRECISION_KEYWORD;
          }
        case 190: break;
        case 28: 
          { return COMMENT_LINE;
          }
        case 191: break;
        case 57: 
          { return MAT2_TYPE;
          }
        case 192: break;
        case 41: 
          { return AND_OP;
          }
        case 193: break;
        case 19: 
          { return RIGHT_ANGLE;
          }
        case 194: break;
        case 7: 
          { return SLASH;
          }
        case 195: break;
        case 32: 
          { return IF_KEYWORD;
          }
        case 196: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 197: break;
        case 62: 
          { return INOUT_KEYWORD;
          }
        case 198: break;
        case 31: 
          { return MUL_ASSIGN;
          }
        case 199: break;
        case 70: 
          { return WHILE_KEYWORD;
          }
        case 200: break;
        case 107: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 201: break;
        case 39: 
          { return GE_OP;
          }
        case 202: break;
        case 95: 
          { return READONLY_KEYWORD;
          }
        case 203: break;
        case 105: 
          { return COMPILER_DIRECTIVE_EXTENSION;
          }
        case 204: break;
        case 14: 
          { return LEFT_PAREN;
          }
        case 205: break;
        case 78: 
          { return MAT3X4_TYPE;
          }
        case 206: break;
        case 8: 
          { return STAR;
          }
        case 207: break;
        case 90: 
          { return COMPILER_DIRECTIVE_PRAGMA;
          }
        case 208: break;
        case 69: 
          { return PATCH_KEYWORD;
          }
        case 209: break;
        case 97: 
          { return COMPILER_DIRECTIVE_VERSION;
          }
        case 210: break;
        case 84: 
          { return SHARED_KEYWORD;
          }
        case 211: break;
        case 81: 
          { return SAMPLE_KEYWORD;
          }
        case 212: break;
        case 109: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 213: break;
        case 51: 
          { return FLAT_KEYWORD;
          }
        case 214: break;
        case 40: 
          { return NE_OP;
          }
        case 215: break;
        case 20: 
          { return BANG;
          }
        case 216: break;
        case 12: 
          { return LEFT_BRACKET;
          }
        case 217: break;
        case 104: 
          { return SUBROUTINE_KEYWORD;
          }
        case 218: break;
        case 85: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 219: break;
        case 45: 
          { return INT_TYPE;
          }
        case 220: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
