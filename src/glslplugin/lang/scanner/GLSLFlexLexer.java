/* The following code was generated by JFlex 1.4.3 on 5/4/15 9:04 PM */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/4/15 9:04 PM from the specification file
 * <tt>/Users/Darkyen/IntelliJProjects/GLSL4Idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\0\1\7\1\5\22\0\1\7\1\103\1\0"+
    "\1\60\1\0\1\74\1\77\1\0\1\70\1\71\1\23\1\73\1\106"+
    "\1\21\1\17\1\22\1\11\1\61\1\51\1\55\1\37\3\2\2\1"+
    "\1\105\1\63\1\75\1\72\1\76\1\104\1\0\1\53\1\3\1\45"+
    "\1\52\1\20\1\16\5\4\1\15\6\4\1\46\1\4\1\10\2\4"+
    "\1\12\2\4\1\66\1\57\1\67\1\100\1\4\1\0\1\30\1\34"+
    "\1\36\1\27\1\35\1\14\1\56\1\47\1\26\1\4\1\62\1\13"+
    "\1\40\1\33\1\25\1\43\1\4\1\44\1\42\1\31\1\32\1\24"+
    "\1\50\1\41\1\54\1\4\1\64\1\101\1\65\1\102\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\2\3\1\5"+
    "\1\6\1\7\1\10\21\3\1\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\36\1\4\7\3\1\1\1\37\1\0"+
    "\1\40\1\0\3\40\2\2\5\3\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\4\3\1\47\1\3\1\50\1\3"+
    "\1\51\34\3\2\4\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\2\3\1\71\7\3\1\72\1\73\1\40"+
    "\4\3\1\74\1\3\1\0\4\3\1\75\3\3\1\76"+
    "\41\3\1\77\1\100\14\3\1\101\2\3\1\102\1\44"+
    "\1\3\1\103\1\3\1\104\1\105\1\106\10\3\1\107"+
    "\1\3\1\110\3\3\1\111\2\3\1\112\4\3\1\113"+
    "\1\114\1\115\15\3\1\116\5\3\1\117\1\120\5\3"+
    "\1\121\2\3\1\122\1\123\1\124\1\3\1\125\1\126"+
    "\1\127\1\130\2\3\1\131\1\132\1\133\1\3\1\134"+
    "\1\135\1\136\2\3\1\137\1\140\1\141\1\3\1\142"+
    "\1\3\1\143\13\3\1\144\5\3\1\145\1\3\1\146"+
    "\2\3\1\147\1\150\1\3\1\151\1\3\1\152\3\3"+
    "\1\153\7\3\1\154\3\3\1\155\1\156\1\157\1\160"+
    "\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\3"+
    "\1\170\1\171\2\3\1\172\3\3\1\173\1\174\1\3"+
    "\1\175\1\3\1\176\1\3\1\177\1\200\1\201\1\202"+
    "\1\203\1\204\1\205\1\206\1\207\1\210\1\3\1\211"+
    "\7\3\1\212\3\3\1\213\1\214\1\3\1\215\3\3"+
    "\1\216\1\217\1\220\6\3\1\221\1\222\2\3\1\223"+
    "\1\224\2\3\1\225\1\226\1\227\2\3\1\230\1\231"+
    "\4\3\1\232\1\0\1\3\1\233\2\3\3\0\3\3"+
    "\3\0\1\234\2\3\3\0\2\3\2\0\1\235\1\236"+
    "\33\0\1\237\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\216"+
    "\0\216\0\216\0\216\0\216\0\216\0\216\0\216\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\216"+
    "\0\u0ad1\0\216\0\216\0\216\0\u0b18\0\216\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\216"+
    "\0\u0dde\0\216\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\216\0\216\0\u1132"+
    "\0\u1179\0\216\0\216\0\u11c0\0\u1207\0\u124e\0\u1295\0\u011c"+
    "\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"+
    "\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\216\0\216\0\216\0\216\0\216\0\216\0\u1c03"+
    "\0\216\0\u1c4a\0\216\0\216\0\216\0\216\0\216\0\216"+
    "\0\216\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\216\0\216\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u011c\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u011c\0\u2264\0\u22ab\0\u22f2\0\u011c\0\u2339\0\u2380"+
    "\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\216"+
    "\0\216\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a"+
    "\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u011c\0\u2fb4\0\u2ffb"+
    "\0\u011c\0\216\0\u3042\0\u011c\0\u3089\0\u011c\0\u011c\0\u011c"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1"+
    "\0\u011c\0\u3308\0\u011c\0\u334f\0\u3396\0\u33dd\0\u011c\0\u3424"+
    "\0\u346b\0\u011c\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d"+
    "\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u011c\0\u3a3e"+
    "\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u011c\0\u011c\0\u3ba1\0\u3be8"+
    "\0\u3c2f\0\u3c76\0\u3cbd\0\u011c\0\u3d04\0\u3d4b\0\u011c\0\u011c"+
    "\0\u011c\0\u3d92\0\u011c\0\u011c\0\u011c\0\u011c\0\u3dd9\0\u3e20"+
    "\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u011c\0\u011c\0\u011c\0\u3f83"+
    "\0\u3fca\0\u011c\0\u011c\0\u011c\0\u4011\0\u011c\0\u4058\0\u011c"+
    "\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290"+
    "\0\u42d7\0\u431e\0\u4365\0\u011c\0\u43ac\0\u43f3\0\u443a\0\u4481"+
    "\0\u44c8\0\u011c\0\u450f\0\u011c\0\u4556\0\u459d\0\u011c\0\u011c"+
    "\0\u45e4\0\u011c\0\u462b\0\u011c\0\u4672\0\u46b9\0\u4700\0\u011c"+
    "\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u011c"+
    "\0\u4938\0\u497f\0\u49c6\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u4a0d\0\u011c\0\u4a54\0\u011c"+
    "\0\u011c\0\u4a9b\0\u4ae2\0\u011c\0\u4b29\0\u4b70\0\u4bb7\0\u011c"+
    "\0\u4bfe\0\u4c45\0\u011c\0\u4c8c\0\u011c\0\u4cd3\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u4d1a\0\u011c\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4"+
    "\0\u4f0b\0\u011c\0\u4f52\0\u4f99\0\u4fe0\0\u011c\0\u011c\0\u5027"+
    "\0\u011c\0\u506e\0\u50b5\0\u50fc\0\u011c\0\u011c\0\u011c\0\u5143"+
    "\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u011c\0\u011c\0\u52ed"+
    "\0\u5334\0\u011c\0\u011c\0\u537b\0\u53c2\0\u5409\0\u011c\0\u5450"+
    "\0\u5497\0\u54de\0\u011c\0\u011c\0\u5525\0\u556c\0\u55b3\0\u55fa"+
    "\0\u011c\0\u5641\0\u5688\0\u011c\0\u56cf\0\u5716\0\u575d\0\u57a4"+
    "\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e\0\u5995\0\u011c"+
    "\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86\0\u5bcd"+
    "\0\u5c14\0\u011c\0\u011c\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77"+
    "\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u5f68\0\u5faf"+
    "\0\u5ff6\0\u603d\0\u6084\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7"+
    "\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391\0\216\0\u63d8"+
    "\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9\0\u6610"+
    "\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801\0\u6848"+
    "\0\u688f\0\u68d6\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80"+
    "\0\u6ac7\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8"+
    "\0\u6cff\0\u6d46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\3\6\1\5\1\7\1\5\1\10"+
    "\1\11\2\5\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\5\1\32\1\33\1\34"+
    "\2\5\1\35\1\36\1\4\3\5\1\4\1\5\1\37"+
    "\1\40\1\4\1\5\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\3"+
    "\2\4\2\5\1\65\1\66\1\67\1\5\1\7\1\5"+
    "\1\70\1\11\2\5\1\12\1\5\1\13\1\14\1\15"+
    "\1\71\1\17\1\72\1\73\1\22\1\23\1\74\1\25"+
    "\1\26\1\75\1\30\1\4\1\31\1\5\1\32\1\76"+
    "\1\34\2\5\1\35\1\36\1\4\3\5\1\4\1\5"+
    "\1\37\1\77\1\4\1\5\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\110\0\2\4\5\0\1\100\1\4\1\0\1\101\1\102"+
    "\1\103\1\102\1\104\1\105\11\0\1\100\2\0\1\105"+
    "\1\0\1\4\11\0\1\4\3\0\1\4\3\0\1\4"+
    "\26\0\4\5\3\0\7\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\31\0\3\6\100\0\1\106\1\107\5\0"+
    "\1\100\1\107\1\110\1\101\1\102\1\103\1\102\1\104"+
    "\1\105\11\0\1\100\2\0\1\105\1\0\1\107\1\0"+
    "\1\110\7\0\1\107\3\0\1\107\3\0\1\107\26\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\111"+
    "\2\5\1\112\26\5\2\0\2\5\25\0\4\5\3\0"+
    "\3\5\1\113\3\5\1\0\1\5\3\0\1\5\1\114"+
    "\2\5\1\115\26\5\2\0\2\5\25\0\2\104\6\0"+
    "\1\104\25\0\1\104\11\0\1\104\3\0\1\104\3\0"+
    "\1\104\46\0\1\116\50\0\1\117\36\0\1\120\1\121"+
    "\46\0\1\122\106\0\1\123\15\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\124\2\5\1\125\4\5"+
    "\1\126\21\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\127\24\5\2\0\2\5"+
    "\25\0\4\5\3\0\4\5\1\130\2\5\1\0\1\5"+
    "\3\0\1\131\6\5\1\132\23\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\133\1\134"+
    "\1\135\11\5\1\136\16\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\137\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\140\12\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\141\1\5\1\142"+
    "\4\5\1\143\23\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\144\31\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\145\1\146\4\5\1\147\11\5\1\150\12\5\2\0"+
    "\2\5\25\0\4\5\3\0\3\5\1\151\3\5\1\0"+
    "\1\5\3\0\33\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\152\7\5\1\153"+
    "\21\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\154\4\5\1\155\21\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\156\1\157\1\160\5\5\1\161\6\5\1\162"+
    "\7\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\163\13\5\1\164\12\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\165\21\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\166\30\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\20\5\1\167\2\5\1\170\7\5\2\0\2\5\31\0"+
    "\1\171\1\172\172\0\1\173\106\0\1\174\1\175\105\0"+
    "\1\176\106\0\1\177\2\0\1\200\103\0\1\201\3\0"+
    "\1\202\102\0\1\203\4\0\1\204\101\0\1\205\5\0"+
    "\1\206\100\0\1\207\6\0\1\210\77\0\1\211\22\0"+
    "\1\66\107\0\1\67\100\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\111\1\212\1\5\1\112\26\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\124\2\5\1\125\4\5\1\213\21\5"+
    "\2\0\2\5\25\0\4\5\3\0\4\5\1\214\2\5"+
    "\1\0\1\5\3\0\1\131\6\5\1\132\23\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\133\1\134\1\135\6\5\1\215\2\5\1\136\16\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\141\1\5\1\142\4\5\1\216\23\5\2\0"+
    "\2\5\25\0\4\5\3\0\3\5\1\217\3\5\1\0"+
    "\1\5\3\0\7\5\1\220\5\5\1\221\2\5\1\222"+
    "\12\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\163\13\5\1\223\12\5\2\0"+
    "\2\5\104\0\1\224\42\0\1\225\110\0\1\225\71\0"+
    "\2\104\6\0\1\104\1\0\1\101\1\102\1\103\1\102"+
    "\1\0\1\105\14\0\1\105\1\0\1\104\11\0\1\104"+
    "\3\0\1\104\3\0\1\104\26\0\2\226\6\0\1\226"+
    "\1\0\1\101\1\102\1\103\1\102\2\0\1\226\15\0"+
    "\1\226\11\0\1\226\3\0\1\226\3\0\1\226\11\0"+
    "\1\226\14\0\2\106\6\0\1\106\1\0\1\101\1\102"+
    "\1\103\1\102\1\104\1\105\14\0\1\105\1\0\1\106"+
    "\11\0\1\106\3\0\1\106\3\0\1\106\26\0\1\106"+
    "\1\107\5\0\1\100\1\107\1\0\1\101\1\102\1\103"+
    "\1\102\1\104\1\105\11\0\1\100\2\0\1\105\1\0"+
    "\1\107\11\0\1\107\3\0\1\107\3\0\1\107\26\0"+
    "\3\110\4\0\1\100\1\110\2\0\1\110\1\0\1\110"+
    "\1\0\1\110\6\0\2\110\1\0\1\100\1\0\4\110"+
    "\5\0\1\110\3\0\3\110\1\0\1\110\3\0\1\110"+
    "\26\0\4\5\3\0\7\5\1\0\1\5\3\0\24\5"+
    "\1\227\6\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\30\5\1\230\2\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\231\2\5\1\232\26\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\233\12\5"+
    "\2\0\2\5\25\0\4\5\3\0\3\5\1\234\3\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\24\0\5\120"+
    "\2\0\100\120\23\121\1\235\63\121\1\0\4\5\3\0"+
    "\3\5\1\236\3\5\1\0\1\5\3\0\2\5\1\237"+
    "\30\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\240\12\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\241"+
    "\20\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\242\25\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\243"+
    "\21\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\244\1\245\3\5\1\246\25\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\247\21\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\250\24\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\251\14\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\252\26\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\253\25\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\254\24\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\255\21\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\256\23\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\257\30\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\260\13\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\261\21\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\262\31\5\2\0"+
    "\2\5\25\0\4\5\3\0\4\5\1\263\2\5\1\0"+
    "\1\5\3\0\33\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\11\5\1\264\21\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\265\14\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\266\13\5\1\267"+
    "\7\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\270\23\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\271"+
    "\25\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\272\27\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\14\5\1\273"+
    "\16\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\274\12\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\10\5\1\275"+
    "\22\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\276\31\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\277"+
    "\26\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\300\25\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\301"+
    "\21\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\302\1\303\10\5\1\304\14\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\32\5\1\305\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\306\30\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\307\30\5\2\0\2\5\32\0\1\172\172\0"+
    "\1\310\106\0\1\311\15\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\312\23\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\241"+
    "\5\5\1\313\12\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\3\5\1\314\3\5\1\315"+
    "\23\5\2\0\2\5\25\0\4\5\3\0\4\5\1\316"+
    "\2\5\1\0\1\5\3\0\33\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\257"+
    "\1\317\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\2\5\1\320\13\5\1\321\14\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\322\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\323\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\324\12\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\325\4\5"+
    "\1\301\21\5\2\0\2\5\25\0\2\226\6\0\1\226"+
    "\1\0\1\101\1\102\1\103\1\102\20\0\1\226\11\0"+
    "\1\226\3\0\1\226\3\0\1\226\26\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\326\13\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\327\31\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\330\26\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\331\25\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\16\5\1\254\14\5\2\0"+
    "\2\5\24\0\22\121\1\332\1\235\63\121\1\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\333\26\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\334\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\30\5\1\335\2\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\13\5\1\336\11\5\1\337\3\5\1\340\1\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\1\341\20\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\342\26\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\343\24\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\344\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\345\22\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\346\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\347\25\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\350\12\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\351\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\352\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\353\25\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\354\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\355\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\356\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\3\5\1\357\3\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\360\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\361\26\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\362\21\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\363\10\5\1\364\14\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\365\21\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\366\25\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\13\5"+
    "\1\367\11\5\1\370\3\5\1\371\1\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\372\30\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\17\5\1\373\13\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\374\24\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\375\12\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\376\31\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\377\12\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\u0100\20\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\1\u0101\20\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\u0102\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u0103\24\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0104\25\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\23\5\1\227\7\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0105\25\5\2\0\2\5\25\0\4\5\3\0\3\5"+
    "\1\u0106\3\5\1\0\1\5\3\0\33\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\u0107\21\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\16\5\1\u0108\14\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\u0109\21\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\u010a\27\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u010b\30\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u010c\21\5\2\0\2\5"+
    "\25\0\4\5\3\0\4\5\1\u010d\2\5\1\0\1\5"+
    "\3\0\33\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u010e\21\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u010f\30\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u0110\21\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u0111\31\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\32\5\1\u0112\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\6\5\1\u0113"+
    "\24\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0114\25\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0115"+
    "\25\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\2\5\1\u0116\30\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u0117"+
    "\11\5\1\u0118\3\5\1\u0119\1\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\20\5\1\u011a"+
    "\12\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u011b\25\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u011c"+
    "\11\5\1\u011d\3\5\1\u011e\1\5\2\0\2\5\25\0"+
    "\4\5\3\0\3\5\1\u011f\3\5\1\0\1\5\3\0"+
    "\33\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u0120\26\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u0121"+
    "\11\5\1\u0122\3\5\1\u0123\1\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0124"+
    "\30\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u0125\11\5\1\u0126\3\5\1\u0127"+
    "\1\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\u0128\31\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\20\5\1\u0129"+
    "\12\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u012a\11\5\1\u012b\3\5\1\u012c"+
    "\1\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u012d\21\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\33\5\2\0"+
    "\1\5\1\u012e\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u012f\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0130\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0131\12\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0132\12\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0133\15\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0134\15\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0135\15\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\u0136\24\5"+
    "\2\0\2\5\25\0\4\5\3\0\3\5\1\u0137\3\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\u0138\20\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u0139\31\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u013a\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u013b\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\23\5\1\u013c\7\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u013d\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u013e\31\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u013f\12\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0140\12\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0141\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0142\21\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0143\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0144\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0145\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u0146\23\5"+
    "\2\0\2\5\25\0\4\5\3\0\4\5\1\u0147\2\5"+
    "\1\0\1\5\3\0\33\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0148\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u0149\23\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u014a\12\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\14\5\1\u014b\16\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u014c\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u014d\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u014e\23\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u014f\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0150\21\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0151\12\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0152\15\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0153\15\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0154\15\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\u0155\22\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0156\12\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\16\5\1\u0157\14\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0158\12\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u0159\23\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u015a\21\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u015b\31\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u015c\11\5"+
    "\1\u015d\3\5\1\u015e\1\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u015f\11\5"+
    "\1\u0160\3\5\1\u0161\1\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u0162\11\5"+
    "\1\u0163\3\5\1\u0164\1\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\14\5\1\227\16\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0165\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0166\25\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\u0167\24\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\23\5\1\u0168\7\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\u0169\27\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u016a\14\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u016b\23\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u016c\23\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u016d\30\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u016e\31\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u016f\31\5\2\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0170\2\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0171\21\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u0172\14\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u0173\26\5\2\0\2\5\25\0\4\5"+
    "\3\0\3\5\1\u0174\3\5\1\0\1\5\3\0\33\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\32\5\1\u0175\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0176\26\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\u0177\27\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u0178\11\5\1\u0179"+
    "\3\5\1\u017a\1\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u017b\11\5\1\u017c"+
    "\3\5\1\u017d\1\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u017e\11\5\1\u017f"+
    "\3\5\1\u0180\1\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\u0181\24\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\14\5\1\u0182\16\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\u0183\13\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\6\5\1\u0184\24\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u0185\23\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\u0186\30\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\20\5\1\u0187\12\5\2\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\u0188\25\5\2\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\u0189\6\5\1\u018a"+
    "\21\5\2\0\2\5\25\0\4\5\3\0\3\5\1\u018b"+
    "\3\5\1\0\1\5\3\0\33\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\u018c"+
    "\20\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\u018d\23\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u018e"+
    "\23\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u018f\27\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0190"+
    "\30\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0191\21\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u0192"+
    "\23\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0193\25\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\u0194"+
    "\21\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0195\21\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0196"+
    "\25\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u0197\27\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\21\5\1\u0198"+
    "\3\5\1\u0199\3\5\1\u019a\1\5\2\0\1\u019b\1\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u019c\30\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u019d\31\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\30\5"+
    "\1\u019e\2\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u019f\25\5\2\0\2\5"+
    "\25\0\4\5\3\0\3\5\1\u01a0\3\5\1\0\1\5"+
    "\3\0\33\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u01a1\31\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u01a2\25\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01a3\21\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\u01a4\20\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u01a5\24\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u01a6\4\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\26\5\1\u01a7\4\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u01a8\4\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\7\5\1\u01a9\23\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u01aa\23\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\30\5\1\u01ab\2\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u01ac\23\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u01ad\25\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\10\5"+
    "\1\u01ae\22\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\22\5\1\u01af\10\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\22\5"+
    "\1\u01b0\10\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01b1\21\5\2\0\2\5"+
    "\25\0\4\5\2\0\1\u01b2\7\5\1\0\1\5\3\0"+
    "\33\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\2\5\1\u01b3\30\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\u01b4"+
    "\21\5\2\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\23\5\1\u01b5\7\5\2\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\23\5\1\u01b6"+
    "\7\5\2\0\2\5\33\0\1\u01b2\3\0\1\u01b7\24\0"+
    "\1\u01b8\6\0\1\u01b9\40\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\u01ba\32\5\2\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\u01bb\26\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u01bc\26\5\2\0\2\5\51\0\1\u01bd"+
    "\116\0\1\u01be\77\0\1\u01bf\61\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01c0\21\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\u01c1\27\5\2\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\u01c2\27\5\2\0\2\5"+
    "\74\0\1\u01c3\65\0\1\u01c4\135\0\1\u01c5\31\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u01c6\31\5"+
    "\2\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u01c7\31\5\2\0\2\5\67\0\1\u01c8"+
    "\71\0\1\u01c9\127\0\1\u01c3\40\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\24\5\1\u01ca\6\5\2\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\24\5"+
    "\1\u01cb\6\5\2\0\2\5\33\0\1\u01cc\131\0\1\u01cd"+
    "\63\0\1\u01cc\4\0\1\u01ce\7\0\1\u01cf\1\0\1\u01d0"+
    "\3\0\1\u01d1\1\0\1\u01d2\3\0\1\u01d3\1\0\1\u01d4"+
    "\104\0\1\u01c3\61\0\1\u01d5\120\0\1\u01d6\7\0\1\u01d7"+
    "\75\0\1\u01d8\6\0\1\u01d9\6\0\1\u01da\70\0\1\u01d8"+
    "\1\0\1\u01db\13\0\1\u01da\70\0\1\u01d8\1\u01dc\111\0"+
    "\1\u01dd\106\0\1\u01de\103\0\1\u01df\107\0\1\u01e0\116\0"+
    "\1\u01e1\105\0\1\u01d7\102\0\1\u01e2\105\0\1\u01e3\111\0"+
    "\1\u01d9\100\0\1\u01e4\112\0\1\u01e5\115\0\1\u01e6\76\0"+
    "\1\u01d9\105\0\1\u01e2\116\0\1\u01e2\11\0\1\u01e2\3\0"+
    "\1\u01e2\114\0\1\u01e7\63\0\1\u01e8\61\0\1\u01e2\132\0"+
    "\1\u01e9\11\0\1\u01e9\3\0\1\u01e9\74\0\1\u01ea\106\0"+
    "\1\u01eb\104\0\1\u01e1\21\0\1\u01e7\36\0\1\u01ec\106\0"+
    "\1\u01ed\130\0\1\u01ee\106\0\1\u01ef\115\0\1\u01f0\106\0"+
    "\1\u01f1\107\0\1\u01f2\3\0\1\u01f3\3\0\1\u01f4\76\0"+
    "\1\u01f5\3\0\1\u01f6\3\0\1\u01f4\63\0\1\u01f7\126\0"+
    "\1\u01f8\106\0\1\u01e2\66\0\1\u01f9\126\0\1\u01fa\70\0"+
    "\1\u01fb\120\0\1\u01fc\4\0\1\u01fd\7\0\1\u01e7\57\0"+
    "\1\u01fe\125\0\1\u01ff\7\0\1\u01e7\60\0\1\u0200\120\0"+
    "\1\u0201\103\0\1\u0202\77\0\1\u01e2\115\0\1\u0203\110\0"+
    "\1\u01fc\14\0\1\u01e7\53\0\1\u0204\122\0\1\u0205\106\0"+
    "\1\u0206\71\0\1\u0207\107\0\1\u0208\106\0\1\u0209\103\0"+
    "\1\u020a\135\0\1\u0200\106\0\1\u01e2\102\0\1\u01e2\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28045];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\34\1\10\11\10\1\1\11\1\1\3\11"+
    "\1\1\1\11\11\1\1\11\1\0\1\11\1\0\12\1"+
    "\2\11\2\1\2\11\46\1\6\11\1\1\1\11\1\1"+
    "\7\11\12\1\2\11\7\1\1\0\52\1\2\11\20\1"+
    "\1\11\327\1\1\0\4\1\3\0\3\1\3\0\3\1"+
    "\3\0\2\1\2\0\2\1\33\0\1\11\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  GLSLFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 123: 
          { return PREPROCESSOR_IFNDEF;
          }
        case 160: break;
        case 89: 
          { return DMAT4_TYPE;
          }
        case 161: break;
        case 21: 
          { return RIGHT_ANGLE;
          }
        case 162: break;
        case 14: 
          { return RIGHT_BRACKET;
          }
        case 163: break;
        case 25: 
          { return TILDE;
          }
        case 164: break;
        case 11: 
          { return LEFT_BRACE;
          }
        case 165: break;
        case 31: 
          { return UINT_CONSTANT;
          }
        case 166: break;
        case 143: 
          { return COHERENT_KEYWORD;
          }
        case 167: break;
        case 37: 
          { return DIV_ASSIGN;
          }
        case 168: break;
        case 13: 
          { return LEFT_BRACKET;
          }
        case 169: break;
        case 47: 
          { return LEFT_OP;
          }
        case 170: break;
        case 120: 
          { return SMOOTH_KEYWORD;
          }
        case 171: break;
        case 90: 
          { return DMAT2_TYPE;
          }
        case 172: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 173: break;
        case 88: 
          { return DVEC3_TYPE;
          }
        case 174: break;
        case 126: 
          { return VARYING_KEYWORD;
          }
        case 175: break;
        case 138: 
          { return PRECISE_KEYWORD;
          }
        case 176: break;
        case 140: 
          { return PREPROCESSOR_DEFINED;
          }
        case 177: break;
        case 86: 
          { return DVEC4_TYPE;
          }
        case 178: break;
        case 54: 
          { return OR_ASSIGN;
          }
        case 179: break;
        case 59: 
          { return DOUBLE_CONSTANT;
          }
        case 180: break;
        case 58: 
          { return PREPROCESSOR_CONCAT;
          }
        case 181: break;
        case 127: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 182: break;
        case 62: 
          { return INT_TYPE;
          }
        case 183: break;
        case 5: 
          { return DOT;
          }
        case 184: break;
        case 99: 
          { return CONST_KEYWORD;
          }
        case 185: break;
        case 73: 
          { return BOOL_TYPE;
          }
        case 186: break;
        case 9: 
          { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
          }
        case 187: break;
        case 81: 
          { return FLOAT_TYPE;
          }
        case 188: break;
        case 87: 
          { return DVEC2_TYPE;
          }
        case 189: break;
        case 141: 
          { return VOLATILE_KEYWORD;
          }
        case 190: break;
        case 144: 
          { return CENTROID_KEYWORD;
          }
        case 191: break;
        case 1: 
          { return UNKNOWN;
          }
        case 192: break;
        case 74: 
          { return ELSE_KEYWORD;
          }
        case 193: break;
        case 78: 
          { return PREPROCESSOR_LINE;
          }
        case 194: break;
        case 130: 
          { return DMAT4X3_TYPE;
          }
        case 195: break;
        case 56: 
          { return NE_OP;
          }
        case 196: break;
        case 109: 
          { return MAT4X4_TYPE;
          }
        case 197: break;
        case 128: 
          { return DMAT4X4_TYPE;
          }
        case 198: break;
        case 10: 
          { return SEMICOLON;
          }
        case 199: break;
        case 151: 
          { return SAMPLER1D_TYPE;
          }
        case 200: break;
        case 15: 
          { return LEFT_PAREN;
          }
        case 201: break;
        case 110: 
          { return MAT4X2_TYPE;
          }
        case 202: break;
        case 80: 
          { return PREPROCESSOR_ELSE;
          }
        case 203: break;
        case 129: 
          { return DMAT4X2_TYPE;
          }
        case 204: break;
        case 121: 
          { return SHARED_KEYWORD;
          }
        case 205: break;
        case 79: 
          { return PREPROCESSOR_ELIF;
          }
        case 206: break;
        case 111: 
          { return MAT4X3_TYPE;
          }
        case 207: break;
        case 108: 
          { return BUFFER_KEYWORD;
          }
        case 208: break;
        case 94: 
          { return UVEC3_TYPE;
          }
        case 209: break;
        case 105: 
          { return PREPROCESSOR_ERROR;
          }
        case 210: break;
        case 100: 
          { return PATCH_KEYWORD;
          }
        case 211: break;
        case 92: 
          { return UVEC4_TYPE;
          }
        case 212: break;
        case 157: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 213: break;
        case 41: 
          { return DO_KEYWORD;
          }
        case 214: break;
        case 48: 
          { return GE_OP;
          }
        case 215: break;
        case 12: 
          { return RIGHT_BRACE;
          }
        case 216: break;
        case 107: 
          { return DOUBLE_TYPE;
          }
        case 217: break;
        case 27: 
          { return QUESTION;
          }
        case 218: break;
        case 156: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 219: break;
        case 93: 
          { return UVEC2_TYPE;
          }
        case 220: break;
        case 84: 
          { return IVEC3_TYPE;
          }
        case 221: break;
        case 50: 
          { return AND_ASSIGN;
          }
        case 222: break;
        case 43: 
          { return ADD_ASSIGN;
          }
        case 223: break;
        case 147: 
          { return INVARIANT_KEYWORD;
          }
        case 224: break;
        case 6: 
          { return DASH;
          }
        case 225: break;
        case 82: 
          { return IVEC4_TYPE;
          }
        case 226: break;
        case 45: 
          { return MOD_ASSIGN;
          }
        case 227: break;
        case 23: 
          { return CARET;
          }
        case 228: break;
        case 57: 
          { return PREPROCESSOR_IF;
          }
        case 229: break;
        case 67: 
          { return VOID_TYPE;
          }
        case 230: break;
        case 71: 
          { return BOOL_CONSTANT;
          }
        case 231: break;
        case 104: 
          { return PREPROCESSOR_ENDIF;
          }
        case 232: break;
        case 101: 
          { return WHILE_KEYWORD;
          }
        case 233: break;
        case 146: 
          { return RESTRICT_KEYWORD;
          }
        case 234: break;
        case 83: 
          { return IVEC2_TYPE;
          }
        case 235: break;
        case 142: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 236: break;
        case 42: 
          { return EQ_OP;
          }
        case 237: break;
        case 35: 
          { return COMMENT_LINE;
          }
        case 238: break;
        case 18: 
          { return PLUS;
          }
        case 239: break;
        case 133: 
          { return DMAT2X3_TYPE;
          }
        case 240: break;
        case 36: 
          { return COMMENT_BLOCK;
          }
        case 241: break;
        case 65: 
          { return PRECISION_KEYWORD;
          }
        case 242: break;
        case 112: 
          { return MAT2X4_TYPE;
          }
        case 243: break;
        case 131: 
          { return DMAT2X4_TYPE;
          }
        case 244: break;
        case 63: 
          { return LEFT_ASSIGN;
          }
        case 245: break;
        case 72: 
          { return UINT_TYPE;
          }
        case 246: break;
        case 149: 
          { return SAMPLER2D_TYPE;
          }
        case 247: break;
        case 125: 
          { return PREPROCESSOR_PRAGMA;
          }
        case 248: break;
        case 60: 
          { return FOR_KEYWORD;
          }
        case 249: break;
        case 103: 
          { return PREPROCESSOR_UNDEF;
          }
        case 250: break;
        case 28: 
          { return COLON;
          }
        case 251: break;
        case 20: 
          { return LEFT_ANGLE;
          }
        case 252: break;
        case 137: 
          { return UNIFORM_KEYWORD;
          }
        case 253: break;
        case 113: 
          { return MAT2X2_TYPE;
          }
        case 254: break;
        case 132: 
          { return DMAT2X2_TYPE;
          }
        case 255: break;
        case 114: 
          { return MAT2X3_TYPE;
          }
        case 256: break;
        case 38: 
          { return MUL_ASSIGN;
          }
        case 257: break;
        case 26: 
          { return BANG;
          }
        case 258: break;
        case 53: 
          { return XOR_OP;
          }
        case 259: break;
        case 7: 
          { return SLASH;
          }
        case 260: break;
        case 66: 
          { return FLAT_KEYWORD;
          }
        case 261: break;
        case 152: 
          { return WRITEONLY_KEYWORD;
          }
        case 262: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 263: break;
        case 119: 
          { return STRUCT;
          }
        case 264: break;
        case 124: 
          { return PREPROCESSOR_DEFINE;
          }
        case 265: break;
        case 40: 
          { return IN_KEYWORD;
          }
        case 266: break;
        case 8: 
          { return STAR;
          }
        case 267: break;
        case 75: 
          { return MAT4_TYPE;
          }
        case 268: break;
        case 153: 
          { return PREPROCESSOR_EXTENSION;
          }
        case 269: break;
        case 46: 
          { return LE_OP;
          }
        case 270: break;
        case 24: 
          { return VERTICAL_BAR;
          }
        case 271: break;
        case 22: 
          { return AMPERSAND;
          }
        case 272: break;
        case 33: 
          { return DEC_OP;
          }
        case 273: break;
        case 122: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 274: break;
        case 19: 
          { return PERCENT;
          }
        case 275: break;
        case 76: 
          { return MAT2_TYPE;
          }
        case 276: break;
        case 139: 
          { return PREPROCESSOR_VERSION;
          }
        case 277: break;
        case 16: 
          { return RIGHT_PAREN;
          }
        case 278: break;
        case 77: 
          { return MAT3_TYPE;
          }
        case 279: break;
        case 118: 
          { return SAMPLE_KEYWORD;
          }
        case 280: break;
        case 68: 
          { return VEC4_TYPE;
          }
        case 281: break;
        case 17: 
          { return EQUAL;
          }
        case 282: break;
        case 51: 
          { return AND_OP;
          }
        case 283: break;
        case 55: 
          { return OR_OP;
          }
        case 284: break;
        case 102: 
          { return PREPROCESSOR_IFDEF;
          }
        case 285: break;
        case 145: 
          { return READONLY_KEYWORD;
          }
        case 286: break;
        case 69: 
          { return VEC2_TYPE;
          }
        case 287: break;
        case 30: 
          { yybegin(YYINITIAL); return PREPROCESSOR_END;
          }
        case 288: break;
        case 61: 
          { return OUT_KEYWORD;
          }
        case 289: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 290: break;
        case 150: 
          { return SAMPLER3D_TYPE;
          }
        case 291: break;
        case 70: 
          { return VEC3_TYPE;
          }
        case 292: break;
        case 39: 
          { return IF_KEYWORD;
          }
        case 293: break;
        case 52: 
          { return XOR_ASSIGN;
          }
        case 294: break;
        case 34: 
          { return SUB_ASSIGN;
          }
        case 295: break;
        case 136: 
          { return DMAT3X3_TYPE;
          }
        case 296: break;
        case 49: 
          { return RIGHT_OP;
          }
        case 297: break;
        case 115: 
          { return MAT3X4_TYPE;
          }
        case 298: break;
        case 29: 
          { return COMMA;
          }
        case 299: break;
        case 98: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 300: break;
        case 134: 
          { return DMAT3X4_TYPE;
          }
        case 301: break;
        case 95: 
          { return BVEC4_TYPE;
          }
        case 302: break;
        case 106: 
          { return LAYOUT_KEYWORD;
          }
        case 303: break;
        case 155: 
          { return SAMPLERCUBE_TYPE;
          }
        case 304: break;
        case 32: 
          { return FLOAT_CONSTANT;
          }
        case 305: break;
        case 154: 
          { return SUBROUTINE_KEYWORD;
          }
        case 306: break;
        case 159: 
          { return PRECISION_STATEMENT;
          }
        case 307: break;
        case 44: 
          { return INC_OP;
          }
        case 308: break;
        case 148: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 309: break;
        case 85: 
          { return INOUT_KEYWORD;
          }
        case 310: break;
        case 116: 
          { return MAT3X2_TYPE;
          }
        case 311: break;
        case 135: 
          { return DMAT3X2_TYPE;
          }
        case 312: break;
        case 96: 
          { return BVEC2_TYPE;
          }
        case 313: break;
        case 117: 
          { return MAT3X3_TYPE;
          }
        case 314: break;
        case 97: 
          { return BVEC3_TYPE;
          }
        case 315: break;
        case 158: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 316: break;
        case 91: 
          { return DMAT3_TYPE;
          }
        case 317: break;
        case 64: 
          { return RIGHT_ASSIGN;
          }
        case 318: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
