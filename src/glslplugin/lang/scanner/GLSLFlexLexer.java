/* The following code was generated by JFlex 1.4.3 on 08/07/15 11:33 */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/07/15 11:33 from the specification file
 * <tt>/home/abigail/glsl4idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\0\1\7\1\5\22\0\1\7\1\104\1\37"+
    "\1\47\1\0\1\75\1\100\1\0\1\71\1\72\1\23\1\74\1\110"+
    "\1\21\1\17\1\22\1\11\1\55\1\52\1\53\1\54\3\2\2\1"+
    "\1\106\1\107\1\76\1\73\1\77\1\105\1\0\2\3\1\57\1\56"+
    "\1\20\1\16\5\4\1\15\5\4\1\63\1\60\1\4\1\10\2\4"+
    "\1\12\2\4\1\67\1\36\1\70\1\101\1\4\1\0\1\43\1\50"+
    "\1\51\1\31\1\30\1\14\1\26\1\24\1\25\1\4\1\62\1\13"+
    "\1\27\1\40\1\33\1\35\1\4\1\42\1\41\1\45\1\32\1\46"+
    "\1\34\1\44\1\61\1\64\1\65\1\102\1\66\1\103\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\2\3\1\5"+
    "\1\6\1\7\1\10\12\3\1\1\6\3\1\11\2\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\36\1\4\6\3\1\1"+
    "\1\3\1\1\1\37\1\0\1\40\1\0\3\40\2\2"+
    "\7\3\1\41\1\42\1\43\1\44\1\45\1\46\2\3"+
    "\1\47\1\50\12\3\1\51\13\3\2\4\34\3\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\3\1\71"+
    "\7\3\1\0\1\72\1\3\1\73\1\74\1\40\7\3"+
    "\1\75\2\3\1\0\5\3\1\76\21\3\1\77\26\3"+
    "\1\100\24\3\1\101\1\102\14\3\1\103\2\3\1\104"+
    "\3\3\1\44\7\3\1\105\1\106\1\107\1\110\6\3"+
    "\1\111\34\3\1\112\1\3\1\113\1\114\1\115\1\3"+
    "\1\116\2\3\1\117\7\3\1\120\1\121\2\3\1\122"+
    "\1\123\10\3\1\124\2\3\1\125\2\3\1\126\1\127"+
    "\1\130\6\3\1\131\1\132\1\133\2\3\1\134\1\135"+
    "\1\136\2\3\1\137\1\140\1\141\1\142\4\3\1\143"+
    "\23\3\1\144\1\145\1\146\1\147\2\3\1\150\1\3"+
    "\1\151\1\3\1\152\1\153\2\3\1\154\2\3\1\155"+
    "\2\3\1\156\1\157\1\160\1\161\1\162\1\163\1\164"+
    "\1\165\1\166\1\100\5\3\1\167\5\3\1\170\1\171"+
    "\1\3\1\172\1\173\1\174\3\3\1\175\4\3\1\176"+
    "\3\3\1\177\1\3\1\200\1\201\3\3\1\202\1\203"+
    "\1\204\1\205\1\206\1\207\1\210\1\211\1\212\1\213"+
    "\1\214\1\215\2\3\1\216\7\3\1\217\4\3\1\220"+
    "\1\221\11\3\1\222\1\223\1\3\1\224\1\225\1\226"+
    "\1\227\1\3\1\230\1\231\1\232\2\3\1\233\1\234"+
    "\1\235\1\3\1\236\1\237\1\3\1\240\10\3\1\241"+
    "\3\3\1\242\4\3\1\243\1\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\222\0\u088e"+
    "\0\u08d7\0\222\0\222\0\222\0\222\0\222\0\222\0\u0920"+
    "\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\222"+
    "\0\u0b68\0\222\0\222\0\222\0\222\0\u0bb1\0\222\0\u0bfa"+
    "\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42"+
    "\0\u0e8b\0\222\0\u0ed4\0\222\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8"+
    "\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240"+
    "\0\u1289\0\222\0\222\0\u12d2\0\u131b\0\222\0\222\0\u1364"+
    "\0\u13ad\0\u0124\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563"+
    "\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab"+
    "\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3"+
    "\0\u1a3c\0\u1a85\0\222\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2"+
    "\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a"+
    "\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082"+
    "\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\222"+
    "\0\222\0\222\0\222\0\222\0\u22ca\0\222\0\u2313\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\u235c\0\u23a5"+
    "\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u0df9"+
    "\0\222\0\u25ed\0\222\0\222\0\u2636\0\u267f\0\u26c8\0\u2711"+
    "\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u0124\0\u287e\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8"+
    "\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230"+
    "\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478"+
    "\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u0124\0\u3677"+
    "\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf"+
    "\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07"+
    "\0\u3b50\0\u3b99\0\u3be2\0\222\0\222\0\u3c2b\0\u3c74\0\u3cbd"+
    "\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05"+
    "\0\u3f4e\0\u0124\0\u3f97\0\u3fe0\0\u0124\0\u4029\0\u4072\0\u40bb"+
    "\0\222\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u0124\0\u43de\0\u4427\0\u4470\0\u44b9"+
    "\0\u4502\0\u454b\0\u0124\0\u4594\0\u45dd\0\u4626\0\u466f\0\u46b8"+
    "\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u4900"+
    "\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48"+
    "\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\u4cb5\0\u4cfe\0\u4d47\0\u0124"+
    "\0\u4d90\0\u0124\0\u0124\0\u0124\0\u4dd9\0\u0124\0\u4e22\0\u4e6b"+
    "\0\u0124\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a"+
    "\0\u0124\0\u0124\0\u50b3\0\u50fc\0\u0124\0\u0124\0\u5145\0\u518e"+
    "\0\u51d7\0\u5220\0\u5269\0\u52b2\0\u52fb\0\u5344\0\u0124\0\u538d"+
    "\0\u53d6\0\u0124\0\u541f\0\u5468\0\u0124\0\u0124\0\u0124\0\u54b1"+
    "\0\u54fa\0\u5543\0\u558c\0\u55d5\0\u561e\0\u5667\0\u56b0\0\u56f9"+
    "\0\u5742\0\u578b\0\u0124\0\u0124\0\u0124\0\u57d4\0\u581d\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u5866\0\u58af\0\u58f8\0\u5941\0\u0124"+
    "\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae\0\u5af7\0\u5b40\0\u5b89"+
    "\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6\0\u5d3f\0\u5d88\0\u5dd1"+
    "\0\u5e1a\0\u5e63\0\u5eac\0\u0124\0\u0124\0\u0124\0\u0124\0\u5ef5"+
    "\0\u5f3e\0\u0124\0\u5f87\0\u0124\0\u5fd0\0\u0124\0\u0124\0\u6019"+
    "\0\u6062\0\u0124\0\u60ab\0\u60f4\0\u0124\0\u613d\0\u6186\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124"+
    "\0\u61cf\0\u6218\0\u6261\0\u62aa\0\u62f3\0\u633c\0\u0124\0\u6385"+
    "\0\u63ce\0\u6417\0\u6460\0\u64a9\0\u0124\0\u0124\0\u64f2\0\u0124"+
    "\0\u653b\0\u0124\0\u6584\0\u65cd\0\u6616\0\u0124\0\u665f\0\u66a8"+
    "\0\u66f1\0\u673a\0\u0124\0\u6783\0\u67cc\0\u6815\0\u0124\0\u685e"+
    "\0\u68a7\0\u0124\0\u68f0\0\u6939\0\u6982\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u69cb\0\u6a14\0\u0124\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38"+
    "\0\u6b81\0\u6bca\0\u6c13\0\u0124\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37"+
    "\0\u0124\0\u0124\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b\0\u6ea4\0\u6eed"+
    "\0\u6f36\0\u6f7f\0\u6fc8\0\u0124\0\u0124\0\u7011\0\u0124\0\u0124"+
    "\0\u0124\0\u0124\0\u705a\0\u0124\0\u0124\0\u0124\0\u70a3\0\u70ec"+
    "\0\u7135\0\u717e\0\u71c7\0\u7210\0\u0124\0\u0124\0\u7259\0\u0124"+
    "\0\u72a2\0\u72eb\0\u7334\0\u737d\0\u73c6\0\u740f\0\u7458\0\u74a1"+
    "\0\u0124\0\u74ea\0\u7533\0\u757c\0\u0124\0\u75c5\0\u760e\0\u7657"+
    "\0\u76a0\0\u0124\0\u0124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\3\6\1\5\1\7\1\5\1\10"+
    "\1\11\2\5\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\33\1\34\1\5"+
    "\1\35\1\36\1\37\1\40\1\41\4\4\7\5\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\3\2\4\2\5\1\66\1\67"+
    "\1\70\1\5\1\7\1\5\1\71\1\11\2\5\1\12"+
    "\1\5\1\13\1\14\1\15\1\16\1\72\1\20\1\21"+
    "\1\73\1\74\1\75\1\25\1\26\1\76\1\30\1\77"+
    "\1\31\1\32\1\33\1\34\1\5\1\35\1\100\1\101"+
    "\1\40\1\41\4\4\7\5\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\112\0\2\4\5\0\1\102\1\4\1\0\1\103\1\104"+
    "\1\105\1\104\1\106\1\107\7\0\1\107\1\0\1\102"+
    "\17\0\4\4\34\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\7\5\1\0\15\5\31\0\3\6"+
    "\102\0\1\110\1\111\5\0\1\102\1\111\1\112\1\103"+
    "\1\104\1\105\1\104\1\106\1\107\7\0\1\107\1\0"+
    "\1\102\11\0\1\112\5\0\4\111\34\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\113\2\5\2\0"+
    "\3\5\1\114\3\5\1\0\15\5\25\0\4\5\3\0"+
    "\3\5\1\115\3\5\1\0\1\5\3\0\1\5\1\116"+
    "\5\5\1\117\2\5\2\0\3\5\1\120\2\5\1\121"+
    "\1\0\15\5\25\0\2\106\6\0\1\106\40\0\4\106"+
    "\54\0\1\122\51\0\1\123\37\0\1\124\1\125\47\0"+
    "\1\126\110\0\1\127\16\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\130\10\5\2\0\3\5\1\131"+
    "\2\5\1\121\1\0\15\5\25\0\4\5\3\0\4\5"+
    "\1\132\2\5\1\0\1\5\3\0\12\5\2\0\1\133"+
    "\5\5\1\134\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\7\5\1\135\2\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\136\5\5\2\0\3\5\1\137\3\5"+
    "\1\0\15\5\25\0\4\5\3\0\3\5\1\140\3\5"+
    "\1\0\1\5\3\0\12\5\2\0\1\141\3\5\1\142"+
    "\2\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\143\1\5\1\144\1\145\2\5"+
    "\1\146\2\5\2\0\6\5\1\147\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\150"+
    "\10\5\2\0\1\151\1\152\4\5\1\153\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\154\3\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\155\11\5\2\0"+
    "\2\5\1\156\4\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\157\3\5\2\0"+
    "\2\5\1\160\1\161\3\5\1\0\15\5\31\0\1\162"+
    "\1\163\103\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\7\5\1\164\2\5\2\0\3\5\1\165\3\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\166\1\167\1\5\1\170\2\5\1\171\1\5\1\172"+
    "\1\5\2\0\3\5\1\173\1\5\1\174\1\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\175\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\1\5\1\176\3\5\1\177\1\5\1\0\1\5\1\200"+
    "\13\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\201\3\5\1\202\5\5\2\0\2\5\1\203\4\5"+
    "\1\0\11\5\1\204\3\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\4\5\1\205\2\5\1\206\2\5"+
    "\2\0\3\5\1\207\3\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\210\1\211"+
    "\2\5\2\0\2\5\1\212\3\5\1\213\1\0\15\5"+
    "\25\0\4\5\3\0\3\5\1\214\3\5\1\0\1\5"+
    "\3\0\4\5\1\215\2\5\1\216\2\5\2\0\3\5"+
    "\1\217\3\5\1\0\15\5\117\0\1\220\110\0\1\221"+
    "\1\222\107\0\1\223\110\0\1\224\2\0\1\225\105\0"+
    "\1\226\3\0\1\227\104\0\1\230\4\0\1\231\103\0"+
    "\1\232\5\0\1\233\102\0\1\234\6\0\1\235\101\0"+
    "\1\236\23\0\1\67\111\0\1\70\102\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\237\5\5\1\113"+
    "\2\5\2\0\3\5\1\114\3\5\1\0\15\5\25\0"+
    "\4\5\3\0\4\5\1\240\2\5\1\0\1\5\3\0"+
    "\12\5\2\0\1\133\5\5\1\134\1\0\15\5\25\0"+
    "\4\5\3\0\3\5\1\241\3\5\1\0\1\5\3\0"+
    "\12\5\2\0\1\242\1\5\1\243\1\5\1\244\2\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\143\1\5\1\144\1\245\2\5\1\146"+
    "\2\5\2\0\6\5\1\147\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\150\10\5"+
    "\2\0\1\246\1\152\4\5\1\153\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\6\5\1\157"+
    "\3\5\2\0\2\5\1\247\1\161\3\5\1\0\15\5"+
    "\24\0\5\250\2\0\30\250\1\251\51\250\1\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\252\2\5"+
    "\1\206\2\5\2\0\3\5\1\207\3\5\1\0\15\5"+
    "\73\0\1\253\55\0\1\254\112\0\1\254\73\0\2\106"+
    "\6\0\1\106\1\0\1\103\1\104\1\105\1\104\1\0"+
    "\1\107\7\0\1\107\21\0\4\106\34\0\2\255\6\0"+
    "\1\255\1\0\1\103\1\104\1\105\1\104\2\0\1\255"+
    "\30\0\4\255\16\0\1\255\15\0\2\110\6\0\1\110"+
    "\1\0\1\103\1\104\1\105\1\104\1\106\1\107\7\0"+
    "\1\107\21\0\4\110\34\0\1\110\1\111\5\0\1\102"+
    "\1\111\1\0\1\103\1\104\1\105\1\104\1\106\1\107"+
    "\7\0\1\107\1\0\1\102\17\0\4\111\34\0\3\112"+
    "\4\0\1\102\1\112\2\0\1\112\1\0\1\112\1\0"+
    "\1\112\7\0\2\112\1\102\10\0\1\112\4\0\10\112"+
    "\32\0\4\5\3\0\7\5\1\0\1\5\3\0\10\5"+
    "\1\256\1\5\2\0\1\257\6\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\11\5\1\260\3\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\261\2\5\2\0"+
    "\3\5\1\262\3\5\1\0\15\5\25\0\4\5\3\0"+
    "\3\5\1\263\3\5\1\0\1\5\3\0\12\5\2\0"+
    "\4\5\1\264\2\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\2\5\1\265"+
    "\4\5\1\0\15\5\25\0\4\5\3\0\3\5\1\266"+
    "\3\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\267\5\5\2\0\7\5\1\0\15\5\24\0"+
    "\5\124\2\0\102\124\23\125\1\270\65\125\1\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\2\5\1\271\7\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\3\5"+
    "\1\272\3\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\3\5\1\273\3\5"+
    "\1\0\1\5\3\0\7\5\1\274\1\5\1\275\2\0"+
    "\5\5\1\276\1\277\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\300\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\5\5\1\301\1\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\302\4\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\5\5\1\303\1\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\1\5\1\304"+
    "\5\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\6\5\1\176\3\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\5\5\1\305\1\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\1\5\1\306\5\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\3\5\1\307"+
    "\3\5\1\0\15\5\25\0\4\5\3\0\4\5\1\310"+
    "\2\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\6\5\1\311\3\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\312"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\1\313\6\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\314\10\5\2\0\1\5\1\315\5\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\316\10\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\4\5"+
    "\1\317\5\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\5\5"+
    "\1\320\1\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\321\10\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\322\10\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\1\323\14\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\324\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\2\5\1\325\2\5\1\326"+
    "\1\5\1\0\15\5\32\0\1\163\103\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\327\7\5\1\330"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\331\6\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\332\2\5\2\0\3\5\1\333\3\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\7\5\1\0\14\5\1\334\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\335"+
    "\2\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\11\5\1\336\2\0\7\5"+
    "\1\0\1\337\14\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\340\10\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\341\6\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\2\5\1\342\1\343\3\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\1\5"+
    "\1\344\1\5\1\345\1\5\1\346\1\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\347\6\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\5\5"+
    "\1\350\1\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\5\5\1\351\1\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\352\10\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\353\6\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\354\3\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\355\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\1\5\1\356\13\5\25\0"+
    "\4\5\3\0\3\5\1\357\3\5\1\0\1\5\3\0"+
    "\1\5\1\360\10\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\2\5\1\361\4\5\1\0\15\5\25\0\4\5\3\0"+
    "\4\5\1\362\2\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\363\2\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\364\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\365"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\3\5\1\366"+
    "\3\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\1\367\6\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\370"+
    "\2\5\1\371\6\5\2\0\1\372\6\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\1\5\1\373\5\5\1\0\15\5\117\0\1\374"+
    "\110\0\1\375\16\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\1\376\6\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\377"+
    "\4\5\2\0\1\u0100\6\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u0101\10\5"+
    "\2\0\1\5\1\u0102\5\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0103\1\176"+
    "\3\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\2\5\1\u0104"+
    "\4\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\5\5\1\u0105\1\5\1\0"+
    "\15\5\25\0\4\5\3\0\4\5\1\u0106\2\5\1\0"+
    "\1\5\3\0\12\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\314"+
    "\3\5\1\u0107\4\5\2\0\1\5\1\315\5\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\324\5\5\2\0\3\5\1\u0108\3\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\2\5\1\u0109\4\5\1\0\1\5\1\356"+
    "\13\5\25\0\2\255\6\0\1\255\1\0\1\103\1\104"+
    "\1\105\1\104\33\0\4\255\34\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u010a\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\347\7\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u010b"+
    "\2\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\3\5\1\u010c"+
    "\3\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\5\5\1\u010d\1\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\5\5\1\u010e\1\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u010f"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\1\5\1\354"+
    "\5\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\7\5\1\0\1\5\1\u0110"+
    "\13\5\24\0\22\125\1\u0111\1\270\65\125\1\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\256\11\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\4\5\1\347"+
    "\2\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\u0112\10\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\6\5\1\u0113"+
    "\3\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\u0114\3\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u0115\5\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\3\5\1\u0116\3\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\1\5\1\u0117\13\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\347\2\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\u0118\10\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\2\5\1\u0119\1\u011a\1\u011b"+
    "\10\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\u011c\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u011d"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\1\5\1\u011e\13\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\5\5\1\u011f\1\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\3\5\1\u0120\3\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\1\u0121\14\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\1\5"+
    "\1\u0122\13\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\5\5\1\u0123\1\5\1\0\15\5"+
    "\25\0\4\5\3\0\4\5\1\u0124\2\5\1\0\1\5"+
    "\3\0\7\5\1\u0125\2\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u0126\10\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\1\257"+
    "\6\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\7\5\1\0\1\5\1\u0127"+
    "\13\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\275\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\3\5\1\u0128\3\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\5\5\1\u0129\1\5"+
    "\1\0\15\5\25\0\4\5\3\0\3\5\1\u012a\3\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\1\5\1\u012b\13\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\5\5"+
    "\1\u012c\1\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\1\5"+
    "\1\u012d\13\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\1\u012e\6\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u012f"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0130\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\2\5\1\u0114\4\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\2\5\1\u0131\4\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u0132"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u0133\2\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u0134\5\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\2\5\1\u0135\4\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\5\5\1\u0136\1\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\11\5\1\u0137\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\u0138\3\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\5\5\1\u012a\1\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u0139\2\5"+
    "\2\0\5\5\1\u013a\1\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u013b\4\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u013c\3\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\2\5\1\u013d\4\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u013e\10\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\1\5"+
    "\1\347\5\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u013f\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\u0140\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u0141"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\2\5\1\u0142\1\u0143\1\u0144\10\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\3\5\1\u0145"+
    "\3\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0146\4\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\11\5\1\u0147\3\5\25\0"+
    "\4\5\3\0\4\5\1\u0148\2\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\3\5\1\u0149\3\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\3\5\1\u014a\3\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\1\5\1\u014b\13\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\1\5\1\352\5\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\5\5\1\u014c"+
    "\1\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u014d\5\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\u014e\6\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\1\5\1\u014f\3\5\1\u0150\1\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u0151"+
    "\5\5\2\0\5\5\1\347\1\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u0152"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0153\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0154\4\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\4\5\1\u0155\2\5\1\0"+
    "\1\5\3\0\12\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u0156"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\u0157\10\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\u0158\2\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\u0159\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u015a"+
    "\10\5\2\0\3\5\1\u0120\3\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u015b"+
    "\5\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\u015c\7\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\1\5\1\u015d\5\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\6\5\1\u015e\3\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\5\5\1\u015f\1\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0160\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\347\4\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\2\5\3\347\10\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\1\u0161\6\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\5\5\1\u0162\1\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\5\5\1\347\1\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\2\5\1\u0163\4\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\2\5"+
    "\1\u0164\4\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\2\5"+
    "\1\u0165\1\u0166\1\u0167\10\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u0168\3\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\4\5\1\u0169\2\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\4\5\1\u016a\2\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\4\5"+
    "\1\u016b\2\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\2\5\1\u016c\4\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\3\5\1\u016d\3\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\2\5\1\u016e\1\u016f\1\u0170\10\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\u0171\3\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\3\5\1\u0172\3\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\2\5"+
    "\1\u0173\1\u0174\1\u0175\10\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\7\5\1\u0176\2\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\1\347\6\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0177"+
    "\7\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\2\5\1\u0178\1\u0179\1\u017a\10\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u017b\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u017c\5\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\u017d\10\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u017e"+
    "\10\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\u017f\10\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\u0180\11\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\3\5\1\273\3\5\1\0\1\5"+
    "\3\0\12\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\2\5"+
    "\1\u0181\4\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\1\5\1\u0182\5\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u0183\5\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\272\2\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\5\5"+
    "\1\u0184\1\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\2\5\1\u0185\4\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u0186\2\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\1\5\1\u0187\13\5\25\0\4\5"+
    "\3\0\3\5\1\u0188\3\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\1\5"+
    "\1\u0189\13\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\u018a\3\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\2\5\1\u018b\4\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u018c\2\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\2\5\1\u018d\4\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u018e\10\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\6\5\1\u0161\1\0\15\5\25\0\4\5\3\0"+
    "\3\5\1\u018f\3\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0190\4\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\5\5\1\u0191\1\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u0192"+
    "\10\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0193\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\7\5\1\0\12\5\1\u0194"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\2\5\1\u0195\1\u0196\1\u0197"+
    "\10\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\2\5\1\u0198\4\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\2\5\1\u0199\4\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u0125\2\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\5\5\1\u019a\1\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\u019b\10\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\4\5\1\u019c\2\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u019d\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\4\5\1\u019e"+
    "\2\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\2\5\1\u019f\4\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\1\u01a0\1\5\1\u016c\4\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\1\u01a1"+
    "\6\5\1\0\15\5\25\0\4\5\3\0\4\5\1\u01a2"+
    "\2\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\u01a3\6\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u01a4"+
    "\10\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\5\5\1\u01a5"+
    "\1\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\2\5\1\347\4\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\347\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\4\5\1\u01a6\2\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\u01a7\10\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\256\6\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\2\5\1\u01a8\1\u01a9\1\u01aa"+
    "\10\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\2\5\1\u01ab\1\u01ac\1\u01ad"+
    "\10\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\2\5\1\u01ae\1\u01af\1\u01b0"+
    "\10\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\1\u01b1\6\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\2\5"+
    "\1\u01b2\4\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\4\5\1\u01b3\2\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\4\5\1\u01b4\2\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\4\5\1\u01b5\2\5\1\0\15\5\25\0\4\5"+
    "\3\0\3\5\1\u01b6\3\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\4\5\1\u01b7\5\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\2\5\1\u01b8\4\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\1\264\6\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u01b9\2\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\7\5\1\0\1\5\1\347"+
    "\13\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\1\5\1\u01ba\5\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\5\5\1\u01bb\1\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\1\5\1\u01bc"+
    "\5\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u01a6\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u01bd\4\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\u01be\11\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\347\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\u01bf\3\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\u01c0\11\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u01c1\5\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\5\5\1\u01c2\1\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\2\5\1\u01c3\4\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\u01c4\10\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\1\u01c5\6\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\1\u01c6\6\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\1\u01c7\14\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\3\5\1\u01c8\3\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\4\5"+
    "\1\272\5\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u01c9\10\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\1\u01ca\6\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\2\5\1\u01cb\4\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u01cc"+
    "\2\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u01cd\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\1\u01ce\6\5\1\0\15\5"+
    "\25\0\4\5\3\0\4\5\1\u01cf\2\5\1\0\1\5"+
    "\3\0\12\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\1\5"+
    "\1\u01d0\5\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\4\5\1\u01d1\5\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\3\5\1\u01d2\3\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u01d3\2\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\3\5"+
    "\1\u01c3\3\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\3\5\1\u01d4\3\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\3\5\1\u01d5\3\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u01d6\4\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\2\5\1\u01d7\1\u01d8\1\u01d9\10\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\2\5\1\u01da\1\u01db\1\u01dc\10\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\2\5\1\u01dd\1\u01de\1\u01df\10\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\5\5"+
    "\1\u01e0\1\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\u01e1\6\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\1\u01e2\6\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u01e3"+
    "\2\5\1\u01e4\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u014e"+
    "\10\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\11\5\1\u01e5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\5\5\1\u01e6\1\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\2\5\1\u01e7\4\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\1\5\1\u0161\13\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\1\5"+
    "\1\u01e8\13\5\25\0\4\5\3\0\3\5\1\u01e9\3\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\u01ea\3\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\5\5"+
    "\1\u0161\1\5\1\0\15\5\25\0\4\5\3\0\3\5"+
    "\1\u01eb\3\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u01ec\7\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u01ed\10\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\1\u01ee"+
    "\6\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\6\5\1\u01ef\3\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\u01f0\10\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u01f1"+
    "\4\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\1\u01f2\6\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\1\u01f3\6\5\1\0\15\5\25\0"+
    "\4\5\3\0\3\5\1\347\3\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\3\5\1\u01f4\3\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\u01f5\2\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\4\5\1\u01f6\5\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u01f7"+
    "\10\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\2\5\1\u01f8\1\u01f9\1\5\1\u01fa\1\5\1\u01fb\5\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\5\5\1\u01fc\1\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\11\5\1\u01fd\3\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\5\5\1\u01fe\1\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u01ff\5\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0200\4\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\5\5"+
    "\1\u0201\1\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\4\5\1\u0202\5\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u0203\2\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\5\5\1\u0204\1\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\7\5"+
    "\1\0\11\5\1\u0205\3\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\1\u0206\6\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\1\5\1\u0207\13\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\1\u0208\6\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\2\0\7\5\1\0\6\5"+
    "\1\u0209\6\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\7\5\1\0\6\5\1\u020a\6\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\2\0\7\5\1\0\6\5\1\u020b\6\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\u020c\3\5"+
    "\2\0\7\5\1\0\15\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\4\5\1\u020d\5\5\2\0\7\5"+
    "\1\0\15\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\2\0\1\u020e\6\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\5\5\1\u020f\1\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0210\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\7\5\1\0\10\5\1\u0211"+
    "\4\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\13\5\1\u0212\1\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\7\5\1\0\10\5\1\u0213\4\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\12\5\2\0\7\5\1\0"+
    "\1\u0214\14\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u0215\10\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\u0216"+
    "\11\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0217\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\u0218\11\5\2\0\7\5\1\0\15\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\4\5"+
    "\1\u0219\5\5\2\0\7\5\1\0\15\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\2\0\6\5"+
    "\1\u021a\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\12\5\2\0\3\5\1\u021b\3\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\12\5\2\0\7\5\1\0\1\5\1\u0114\13\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\2\0"+
    "\3\5\1\u021c\3\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u021d\5\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u021e\4\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\u021f\4\5\2\0\7\5\1\0\15\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u0220"+
    "\2\5\2\0\7\5\1\0\15\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u0221\2\5\2\0"+
    "\7\5\1\0\15\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\10\5\1\u0222\1\5\2\0\7\5\1\0"+
    "\15\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\10\5\1\u0223\1\5\2\0\7\5\1\0\15\5\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30441];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\33\1\1\11\2\1\6\11\10\1\1\11"+
    "\1\1\4\11\1\1\1\11\12\1\1\11\1\0\1\11"+
    "\1\0\14\1\2\11\2\1\2\11\33\1\1\11\34\1"+
    "\5\11\1\1\1\11\1\1\7\11\11\1\1\0\1\11"+
    "\1\1\2\11\13\1\1\0\103\1\2\11\23\1\1\11"+
    "\u0112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 127: 
          { return PREPROCESSOR_IFNDEF;
          }
        case 165: break;
        case 91: 
          { return DMAT4_TYPE;
          }
        case 166: break;
        case 20: 
          { return RIGHT_ANGLE;
          }
        case 167: break;
        case 13: 
          { return RIGHT_BRACKET;
          }
        case 168: break;
        case 24: 
          { return TILDE;
          }
        case 169: break;
        case 10: 
          { return LEFT_BRACE;
          }
        case 170: break;
        case 31: 
          { return UINT_CONSTANT;
          }
        case 171: break;
        case 150: 
          { return COHERENT_KEYWORD;
          }
        case 172: break;
        case 37: 
          { return DIV_ASSIGN;
          }
        case 173: break;
        case 12: 
          { return LEFT_BRACKET;
          }
        case 174: break;
        case 47: 
          { return LEFT_OP;
          }
        case 175: break;
        case 121: 
          { return SMOOTH_KEYWORD;
          }
        case 176: break;
        case 89: 
          { return DMAT2_TYPE;
          }
        case 177: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 178: break;
        case 93: 
          { return DVEC3_TYPE;
          }
        case 179: break;
        case 143: 
          { return VARYING_KEYWORD;
          }
        case 180: break;
        case 142: 
          { return PRECISE_KEYWORD;
          }
        case 181: break;
        case 144: 
          { return PREPROCESSOR_DEFINED;
          }
        case 182: break;
        case 94: 
          { return DVEC4_TYPE;
          }
        case 183: break;
        case 54: 
          { return OR_ASSIGN;
          }
        case 184: break;
        case 60: 
          { return DOUBLE_CONSTANT;
          }
        case 185: break;
        case 140: 
          { return DEFAULT_KEYWORD;
          }
        case 186: break;
        case 59: 
          { return PREPROCESSOR_CONCAT;
          }
        case 187: break;
        case 130: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 188: break;
        case 62: 
          { return INT_TYPE;
          }
        case 189: break;
        case 5: 
          { return DOT;
          }
        case 190: break;
        case 104: 
          { return CONST_KEYWORD;
          }
        case 191: break;
        case 79: 
          { return BOOL_TYPE;
          }
        case 192: break;
        case 9: 
          { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
          }
        case 193: break;
        case 84: 
          { return FLOAT_TYPE;
          }
        case 194: break;
        case 92: 
          { return DVEC2_TYPE;
          }
        case 195: break;
        case 148: 
          { return VOLATILE_KEYWORD;
          }
        case 196: break;
        case 149: 
          { return CENTROID_KEYWORD;
          }
        case 197: break;
        case 1: 
          { return UNKNOWN;
          }
        case 198: break;
        case 122: 
          { return SWITCH_KEYWORD;
          }
        case 199: break;
        case 72: 
          { return ELSE_KEYWORD;
          }
        case 200: break;
        case 81: 
          { return PREPROCESSOR_LINE;
          }
        case 201: break;
        case 138: 
          { return DMAT4X3_TYPE;
          }
        case 202: break;
        case 56: 
          { return NE_OP;
          }
        case 203: break;
        case 118: 
          { return MAT4X4_TYPE;
          }
        case 204: break;
        case 139: 
          { return DMAT4X4_TYPE;
          }
        case 205: break;
        case 28: 
          { return SEMICOLON;
          }
        case 206: break;
        case 157: 
          { return SAMPLER1D_TYPE;
          }
        case 207: break;
        case 14: 
          { return LEFT_PAREN;
          }
        case 208: break;
        case 80: 
          { return CASE_KEYWORD;
          }
        case 209: break;
        case 116: 
          { return MAT4X2_TYPE;
          }
        case 210: break;
        case 83: 
          { return PREPROCESSOR_ELSE;
          }
        case 211: break;
        case 137: 
          { return DMAT4X2_TYPE;
          }
        case 212: break;
        case 120: 
          { return SHARED_KEYWORD;
          }
        case 213: break;
        case 82: 
          { return PREPROCESSOR_ELIF;
          }
        case 214: break;
        case 117: 
          { return MAT4X3_TYPE;
          }
        case 215: break;
        case 126: 
          { return BUFFER_KEYWORD;
          }
        case 216: break;
        case 96: 
          { return UVEC3_TYPE;
          }
        case 217: break;
        case 107: 
          { return PREPROCESSOR_ERROR;
          }
        case 218: break;
        case 99: 
          { return PATCH_KEYWORD;
          }
        case 219: break;
        case 97: 
          { return UVEC4_TYPE;
          }
        case 220: break;
        case 163: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 221: break;
        case 41: 
          { return DO_KEYWORD;
          }
        case 222: break;
        case 48: 
          { return GE_OP;
          }
        case 223: break;
        case 11: 
          { return RIGHT_BRACE;
          }
        case 224: break;
        case 119: 
          { return DOUBLE_TYPE;
          }
        case 225: break;
        case 26: 
          { return QUESTION;
          }
        case 226: break;
        case 162: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 227: break;
        case 95: 
          { return UVEC2_TYPE;
          }
        case 228: break;
        case 87: 
          { return IVEC3_TYPE;
          }
        case 229: break;
        case 50: 
          { return AND_ASSIGN;
          }
        case 230: break;
        case 43: 
          { return ADD_ASSIGN;
          }
        case 231: break;
        case 152: 
          { return INVARIANT_KEYWORD;
          }
        case 232: break;
        case 6: 
          { return DASH;
          }
        case 233: break;
        case 88: 
          { return IVEC4_TYPE;
          }
        case 234: break;
        case 45: 
          { return MOD_ASSIGN;
          }
        case 235: break;
        case 22: 
          { return CARET;
          }
        case 236: break;
        case 57: 
          { return PREPROCESSOR_IF;
          }
        case 237: break;
        case 78: 
          { return VOID_TYPE;
          }
        case 238: break;
        case 74: 
          { return BOOL_CONSTANT;
          }
        case 239: break;
        case 106: 
          { return PREPROCESSOR_ENDIF;
          }
        case 240: break;
        case 98: 
          { return WHILE_KEYWORD;
          }
        case 241: break;
        case 151: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 242: break;
        case 146: 
          { return RESTRICT_KEYWORD;
          }
        case 243: break;
        case 86: 
          { return IVEC2_TYPE;
          }
        case 244: break;
        case 42: 
          { return EQ_OP;
          }
        case 245: break;
        case 35: 
          { return COMMENT_LINE;
          }
        case 246: break;
        case 17: 
          { return PLUS;
          }
        case 247: break;
        case 132: 
          { return DMAT2X3_TYPE;
          }
        case 248: break;
        case 36: 
          { return COMMENT_BLOCK;
          }
        case 249: break;
        case 154: 
          { return PRECISION_KEYWORD;
          }
        case 250: break;
        case 112: 
          { return MAT2X4_TYPE;
          }
        case 251: break;
        case 133: 
          { return DMAT2X4_TYPE;
          }
        case 252: break;
        case 65: 
          { return LEFT_ASSIGN;
          }
        case 253: break;
        case 73: 
          { return UINT_TYPE;
          }
        case 254: break;
        case 155: 
          { return SAMPLER2D_TYPE;
          }
        case 255: break;
        case 129: 
          { return PREPROCESSOR_PRAGMA;
          }
        case 256: break;
        case 61: 
          { return FOR_KEYWORD;
          }
        case 257: break;
        case 108: 
          { return PREPROCESSOR_UNDEF;
          }
        case 258: break;
        case 27: 
          { return COLON;
          }
        case 259: break;
        case 19: 
          { return LEFT_ANGLE;
          }
        case 260: break;
        case 141: 
          { return UNIFORM_KEYWORD;
          }
        case 261: break;
        case 110: 
          { return MAT2X2_TYPE;
          }
        case 262: break;
        case 131: 
          { return DMAT2X2_TYPE;
          }
        case 263: break;
        case 111: 
          { return MAT2X3_TYPE;
          }
        case 264: break;
        case 38: 
          { return MUL_ASSIGN;
          }
        case 265: break;
        case 25: 
          { return BANG;
          }
        case 266: break;
        case 53: 
          { return XOR_OP;
          }
        case 267: break;
        case 7: 
          { return SLASH;
          }
        case 268: break;
        case 68: 
          { return FLAT_KEYWORD;
          }
        case 269: break;
        case 153: 
          { return WRITEONLY_KEYWORD;
          }
        case 270: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 271: break;
        case 124: 
          { return STRUCT;
          }
        case 272: break;
        case 128: 
          { return PREPROCESSOR_DEFINE;
          }
        case 273: break;
        case 40: 
          { return IN_KEYWORD;
          }
        case 274: break;
        case 58: 
          { return PREPROCESSOR_STRING;
          }
        case 275: break;
        case 8: 
          { return STAR;
          }
        case 276: break;
        case 71: 
          { return MAT4_TYPE;
          }
        case 277: break;
        case 159: 
          { return PREPROCESSOR_EXTENSION;
          }
        case 278: break;
        case 46: 
          { return LE_OP;
          }
        case 279: break;
        case 23: 
          { return VERTICAL_BAR;
          }
        case 280: break;
        case 21: 
          { return AMPERSAND;
          }
        case 281: break;
        case 33: 
          { return DEC_OP;
          }
        case 282: break;
        case 125: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 283: break;
        case 18: 
          { return PERCENT;
          }
        case 284: break;
        case 69: 
          { return MAT2_TYPE;
          }
        case 285: break;
        case 145: 
          { return PREPROCESSOR_VERSION;
          }
        case 286: break;
        case 15: 
          { return RIGHT_PAREN;
          }
        case 287: break;
        case 70: 
          { return MAT3_TYPE;
          }
        case 288: break;
        case 123: 
          { return SAMPLE_KEYWORD;
          }
        case 289: break;
        case 77: 
          { return VEC4_TYPE;
          }
        case 290: break;
        case 64: 
          { return RESERVED_KEYWORD;
          }
        case 291: break;
        case 16: 
          { return EQUAL;
          }
        case 292: break;
        case 51: 
          { return AND_OP;
          }
        case 293: break;
        case 55: 
          { return OR_OP;
          }
        case 294: break;
        case 105: 
          { return PREPROCESSOR_IFDEF;
          }
        case 295: break;
        case 147: 
          { return READONLY_KEYWORD;
          }
        case 296: break;
        case 75: 
          { return VEC2_TYPE;
          }
        case 297: break;
        case 30: 
          { yybegin(YYINITIAL); return PREPROCESSOR_END;
          }
        case 298: break;
        case 63: 
          { return OUT_KEYWORD;
          }
        case 299: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 300: break;
        case 156: 
          { return SAMPLER3D_TYPE;
          }
        case 301: break;
        case 76: 
          { return VEC3_TYPE;
          }
        case 302: break;
        case 39: 
          { return IF_KEYWORD;
          }
        case 303: break;
        case 67: 
          { return PRECISION_QUALIFIER;
          }
        case 304: break;
        case 52: 
          { return XOR_ASSIGN;
          }
        case 305: break;
        case 34: 
          { return SUB_ASSIGN;
          }
        case 306: break;
        case 135: 
          { return DMAT3X3_TYPE;
          }
        case 307: break;
        case 49: 
          { return RIGHT_OP;
          }
        case 308: break;
        case 115: 
          { return MAT3X4_TYPE;
          }
        case 309: break;
        case 29: 
          { return COMMA;
          }
        case 310: break;
        case 100: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 311: break;
        case 136: 
          { return DMAT3X4_TYPE;
          }
        case 312: break;
        case 103: 
          { return BVEC4_TYPE;
          }
        case 313: break;
        case 109: 
          { return LAYOUT_KEYWORD;
          }
        case 314: break;
        case 161: 
          { return SAMPLERCUBE_TYPE;
          }
        case 315: break;
        case 32: 
          { return FLOAT_CONSTANT;
          }
        case 316: break;
        case 160: 
          { return SUBROUTINE_KEYWORD;
          }
        case 317: break;
        case 44: 
          { return INC_OP;
          }
        case 318: break;
        case 158: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 319: break;
        case 85: 
          { return INOUT_KEYWORD;
          }
        case 320: break;
        case 113: 
          { return MAT3X2_TYPE;
          }
        case 321: break;
        case 134: 
          { return DMAT3X2_TYPE;
          }
        case 322: break;
        case 101: 
          { return BVEC2_TYPE;
          }
        case 323: break;
        case 114: 
          { return MAT3X3_TYPE;
          }
        case 324: break;
        case 102: 
          { return BVEC3_TYPE;
          }
        case 325: break;
        case 164: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 326: break;
        case 90: 
          { return DMAT3_TYPE;
          }
        case 327: break;
        case 66: 
          { return RIGHT_ASSIGN;
          }
        case 328: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
