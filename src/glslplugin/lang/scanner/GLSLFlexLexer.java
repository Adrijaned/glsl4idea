/* The following code was generated by JFlex 1.4.3 on 22/04/15 07:36 */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/04/15 07:36 from the specification file
 * <tt>/home/abigail/glsl4idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\0\1\7\1\5\22\0\1\7\1\74\1\0"+
    "\1\56\2\0\1\75\1\0\1\66\1\67\1\17\1\71\1\102\1\15"+
    "\1\13\1\16\1\10\1\57\1\47\1\53\1\35\3\2\2\1\1\101"+
    "\1\61\1\72\1\70\1\73\1\100\1\0\1\51\1\3\1\43\1\50"+
    "\1\14\1\12\14\4\1\44\4\4\1\11\2\4\1\64\1\55\1\65"+
    "\1\77\1\4\1\0\1\26\1\32\1\34\1\23\1\33\1\24\1\54"+
    "\1\45\1\22\1\4\1\60\1\25\1\36\1\31\1\21\1\41\1\4"+
    "\1\42\1\40\1\27\1\30\1\20\1\46\1\37\1\52\1\4\1\62"+
    "\1\76\1\63\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\23\3\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\1\1\26\1\27\1\30\2\31\1\4\7\3"+
    "\1\1\4\32\2\2\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\5\3\1\41\1\42\1\43\35\3\2\4\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\3\1\55\10\3\1\56\1\32\1\0\4\3\1\57"+
    "\3\3\1\60\1\3\1\61\53\3\1\36\1\62\2\3"+
    "\1\63\1\64\1\65\5\3\1\66\1\67\1\3\1\70"+
    "\3\3\1\71\2\3\1\72\4\3\1\73\1\74\1\75"+
    "\21\3\1\76\1\3\1\77\1\100\6\3\1\101\1\102"+
    "\1\103\1\3\1\104\1\3\1\105\3\3\1\106\1\107"+
    "\1\110\1\3\1\111\1\3\1\112\13\3\1\113\5\3"+
    "\1\114\1\3\1\115\2\3\1\116\1\117\1\3\1\120"+
    "\10\3\1\121\3\3\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\1\3\1\135"+
    "\1\136\2\3\1\137\3\3\1\140\1\141\1\3\1\142"+
    "\1\3\1\143\1\3\1\144\1\3\1\145\7\3\1\146"+
    "\3\3\1\147\1\150\1\3\1\151\3\3\1\152\1\153"+
    "\1\154\6\3\1\155\1\156\2\3\1\157\1\160\2\3"+
    "\1\161\1\162\1\163\2\3\1\164\1\165\4\3\1\166"+
    "\1\0\1\3\1\167\2\3\3\0\3\3\3\0\1\170"+
    "\2\3\3\0\2\3\2\0\1\171\1\172\33\0\1\173"+
    "\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\206"+
    "\0\206\0\206\0\206\0\206\0\206\0\206\0\206\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\206"+
    "\0\206\0\206\0\u0a35\0\206\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\206\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\206\0\206\0\u0e22\0\u0e65\0\206"+
    "\0\206\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u010c\0\u0ff7"+
    "\0\u010c\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\206"+
    "\0\206\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\206\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u010c\0\u1c44\0\u1c87\0\u1cca\0\u010c\0\u1d0d"+
    "\0\u010c\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742"+
    "\0\u2785\0\u27c8\0\u280b\0\u284e\0\206\0\u010c\0\u2891\0\u28d4"+
    "\0\u010c\0\u010c\0\u010c\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23"+
    "\0\u010c\0\u010c\0\u2a66\0\u010c\0\u2aa9\0\u2aec\0\u2b2f\0\u010c"+
    "\0\u2b72\0\u2bb5\0\u010c\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04"+
    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\u010c\0\u3240\0\u010c\0\u010c\0\u3283"+
    "\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u010c\0\u010c\0\u010c"+
    "\0\u3415\0\u010c\0\u3458\0\u010c\0\u349b\0\u34de\0\u3521\0\u010c"+
    "\0\u010c\0\u010c\0\u3564\0\u010c\0\u35a7\0\u010c\0\u35ea\0\u362d"+
    "\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845"+
    "\0\u3888\0\u010c\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u010c"+
    "\0\u3a1a\0\u010c\0\u3a5d\0\u3aa0\0\u010c\0\u010c\0\u3ae3\0\u010c"+
    "\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb"+
    "\0\u010c\0\u3d3e\0\u3d81\0\u3dc4\0\u010c\0\u010c\0\u010c\0\u010c"+
    "\0\u010c\0\u010c\0\u010c\0\u010c\0\u010c\0\u3e07\0\u010c\0\u3e4a"+
    "\0\u010c\0\u010c\0\u3e8d\0\u3ed0\0\u010c\0\u3f13\0\u3f56\0\u3f99"+
    "\0\u010c\0\u3fdc\0\u401f\0\u010c\0\u4062\0\u010c\0\u40a5\0\u010c"+
    "\0\u40e8\0\u010c\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a"+
    "\0\u42bd\0\u010c\0\u4300\0\u4343\0\u4386\0\u010c\0\u010c\0\u43c9"+
    "\0\u010c\0\u440c\0\u444f\0\u4492\0\u010c\0\u010c\0\u010c\0\u44d5"+
    "\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u010c\0\u010c\0\u4667"+
    "\0\u46aa\0\u010c\0\u010c\0\u46ed\0\u4730\0\u4773\0\u010c\0\u47b6"+
    "\0\u47f9\0\u483c\0\u010c\0\u010c\0\u487f\0\u48c2\0\u4905\0\u4948"+
    "\0\u010c\0\u498b\0\u49ce\0\u010c\0\u4a11\0\u4a54\0\u4a97\0\u4ada"+
    "\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u010c"+
    "\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7"+
    "\0\u4f0a\0\u010c\0\u010c\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059"+
    "\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271"+
    "\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489"+
    "\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\206\0\u565e"+
    "\0\u56a1\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876"+
    "\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e"+
    "\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6"+
    "\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe"+
    "\0\u5f01\0\u5f44";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\3\6\1\7\2\5\1\10\1\5"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\4\1\31\1\5\1\32\1\33\1\34\2\5\1\35"+
    "\1\36\1\4\3\5\1\4\1\5\1\37\1\40\1\4"+
    "\1\5\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\3\2\4\2\5\1\63\1\64"+
    "\1\65\1\7\2\5\1\10\1\5\1\11\1\12\1\13"+
    "\1\66\1\15\1\67\1\70\1\20\1\71\1\22\1\23"+
    "\1\72\1\25\1\26\1\73\1\30\1\4\1\31\1\5"+
    "\1\32\1\74\1\34\2\5\1\35\1\36\1\4\3\5"+
    "\1\4\1\5\1\37\1\75\1\4\1\5\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\104\0\2\4\5\0\1\4\1\0\1\76\1\77\1\100"+
    "\7\0\1\76\6\0\1\100\1\0\1\4\11\0\1\4"+
    "\3\0\1\4\3\0\1\4\24\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\35\5\2\0\2\5\27\0\3\6"+
    "\74\0\1\101\1\102\5\0\1\102\1\103\1\76\1\77"+
    "\1\100\7\0\1\76\6\0\1\100\1\0\1\102\1\0"+
    "\1\103\7\0\1\102\3\0\1\102\3\0\1\102\24\0"+
    "\2\77\5\0\1\77\24\0\1\77\11\0\1\77\3\0"+
    "\1\77\3\0\1\77\40\0\1\104\52\0\1\105\30\0"+
    "\1\106\1\107\50\0\1\110\102\0\1\111\13\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\1\5\1\112\4\5"+
    "\1\113\4\5\1\114\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\10\5\1\115\24\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\1\116\3\5\1\117\4\5\1\120\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\1\5\1\121\1\122\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\1\5\1\123\3\5"+
    "\1\124\1\125\26\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\1\5\1\126\33\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\7\5\1\127\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\22\5\1\130\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\11\5\1\131\23\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\1\5\1\132\33\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\1\133\1\134\6\5\1\135\11\5\1\136\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\5\5\1\137\27\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\1\5\1\140\11\5\1\141"+
    "\21\5\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\6\5\1\142\4\5\1\143\21\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\6\5\1\144\1\145\1\146\5\5\1\147\6\5\1\150"+
    "\7\5\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\6\5\1\151\13\5\1\152\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\13\5\1\153\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\2\5\1\154\32\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\22\5\1\155\2\5\1\156\7\5\2\0\2\5\27\0"+
    "\1\157\1\160\164\0\1\161\102\0\1\162\1\163\101\0"+
    "\1\164\102\0\1\165\102\0\1\166\107\0\1\167\103\0"+
    "\1\170\103\0\1\171\11\0\1\64\103\0\1\65\74\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\1\5\1\112"+
    "\4\5\1\113\4\5\1\172\21\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\1\116\3\5"+
    "\1\173\4\5\1\120\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\1\5\1\121\1\122"+
    "\10\5\1\174\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\1\5\1\126\1\175\32\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\11\5\1\176\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\5\5\1\177\3\5"+
    "\1\200\5\5\1\201\2\5\1\202\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\6\5"+
    "\1\151\13\5\1\203\12\5\2\0\2\5\100\0\1\204"+
    "\25\0\2\77\5\0\1\77\1\0\1\76\1\0\1\100"+
    "\7\0\1\76\6\0\1\100\1\0\1\77\11\0\1\77"+
    "\3\0\1\77\3\0\1\77\24\0\2\205\5\0\1\205"+
    "\1\0\1\76\2\0\1\205\6\0\1\76\10\0\1\205"+
    "\11\0\1\205\3\0\1\205\3\0\1\205\11\0\1\205"+
    "\12\0\2\101\5\0\1\101\1\0\1\76\1\77\1\100"+
    "\7\0\1\76\6\0\1\100\1\0\1\101\11\0\1\101"+
    "\3\0\1\101\3\0\1\101\24\0\1\101\1\102\5\0"+
    "\1\102\1\0\1\76\1\77\1\100\7\0\1\76\6\0"+
    "\1\100\1\0\1\102\11\0\1\102\3\0\1\102\3\0"+
    "\1\102\24\0\3\103\4\0\1\103\1\0\1\103\1\0"+
    "\1\103\6\0\2\103\1\0\1\103\3\0\4\103\5\0"+
    "\1\103\3\0\3\103\1\0\1\103\3\0\1\103\23\0"+
    "\5\106\2\0\74\106\17\107\1\206\63\107\1\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\2\5\1\207\2\5"+
    "\1\210\27\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\22\5\1\211\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\14\5"+
    "\1\212\20\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\7\5\1\213\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\13\5"+
    "\1\214\21\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\1\215\1\216\5\5\1\217\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\20\5\1\220\14\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\22\5\1\221\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\1\5\1\222\4\5\1\223\26\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\5\5"+
    "\1\224\27\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\26\5\1\225\6\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\7\5"+
    "\1\226\25\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\10\5\1\227\24\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\2\5"+
    "\1\230\32\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\21\5\1\231\13\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\13\5"+
    "\1\232\21\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\1\5\1\233\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\4\5"+
    "\1\234\30\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\13\5\1\235\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\20\5"+
    "\1\236\14\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\11\5\1\237\13\5\1\240\7\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\11\5\1\241\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\7\5\1\242\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\3\5\1\243\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\16\5\1\244\16\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\22\5\1\245\12\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\12\5\1\246\22\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\1\5\1\247\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\6\5\1\250\26\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\7\5\1\251\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\13\5\1\252\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\6\5\1\253\1\254\10\5\1\255\14\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\34\5\1\256\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\2\5\1\257\32\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\2\5"+
    "\1\260\32\5\2\0\2\5\30\0\1\160\75\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\14\5\1\212\5\5"+
    "\1\261\12\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\3\5\1\262\5\5\1\263\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\4\5\1\264\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\11\5\1\265\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\2\5\1\230\1\266\31\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\2\5\1\267"+
    "\15\5\1\270\14\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\3\5\1\271\31\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\7\5\1\272\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\22\5\1\273\12\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\6\5\1\274\4\5\1\252\21\5\2\0\2\5\23\0"+
    "\2\205\5\0\1\205\1\0\1\76\11\0\1\76\10\0"+
    "\1\205\11\0\1\205\3\0\1\205\3\0\1\205\23\0"+
    "\16\107\1\275\1\206\63\107\1\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\3\5\1\276\31\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\6\5"+
    "\1\277\26\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\32\5\1\300\2\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\15\5"+
    "\1\301\11\5\1\302\3\5\1\303\1\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\14\5"+
    "\1\304\20\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\6\5\1\305\26\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\10\5"+
    "\1\306\24\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\14\5\1\307\20\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\6\5"+
    "\1\310\26\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\7\5\1\311\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\20\5"+
    "\1\227\14\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\21\5\1\312\13\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\22\5"+
    "\1\313\12\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\13\5\1\314\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\4\5"+
    "\1\315\30\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\13\5\1\316\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\14\5"+
    "\1\317\20\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\5\5\1\320\27\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\4\5"+
    "\1\321\30\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\6\5\1\322\26\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\13\5"+
    "\1\323\21\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\7\5\1\324\10\5\1\325\14\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\13\5\1\326\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\7\5\1\327\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\15\5\1\330\11\5\1\331\3\5\1\332\1\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\2\5\1\333\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\21\5\1\334\13\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\10\5\1\335\24\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\22\5\1\336\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\1\5\1\337\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\22\5\1\340\12\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\14\5\1\341\20\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\14\5\1\342\20\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\3\5\1\343\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\10\5\1\344\24\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\7\5\1\345\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\25\5\1\225\7\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\7\5\1\346\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\5\5\1\347\27\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\20\5\1\350\14\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\13\5\1\351\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\3\5\1\352\31\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\2\5\1\353\32\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\13\5\1\354\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\13\5\1\355\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\4\5\1\356\30\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\13\5\1\357\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\2\5\1\360\32\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\13\5\1\361\21\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\1\5\1\362\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\34\5\1\363\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\7\5\1\364\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\2\5\1\365\32\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\15\5\1\366\11\5\1\367\3\5\1\370\1\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\22\5\1\371\12\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\7\5\1\372\25\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\6\5\1\373\26\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\7\5\1\374\25\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\2\5\1\375\32\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\1\5\1\376\33\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\22\5\1\377\12\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\15\5\1\u0100\11\5\1\u0101"+
    "\3\5\1\u0102\1\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\13\5\1\u0103\21\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\35\5\2\0\1\5\1\u0104\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\2\5\1\u0105\32\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\7\5"+
    "\1\u0106\25\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\22\5\1\u0107\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\22\5"+
    "\1\u0108\12\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\17\5\1\u0109\15\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\17\5"+
    "\1\u010a\15\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\17\5\1\u010b\15\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\10\5"+
    "\1\u010c\24\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\5\5\1\u010d\27\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\14\5"+
    "\1\u010e\20\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\1\5\1\u010f\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\7\5"+
    "\1\u0110\25\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\13\5\1\u0111\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\25\5"+
    "\1\u0112\7\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\2\5\1\u0113\32\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\1\5"+
    "\1\u0114\33\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\22\5\1\u0115\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\22\5"+
    "\1\u0116\12\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\13\5\1\u0117\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\13\5"+
    "\1\u0118\21\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\2\5\1\u0119\32\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\4\5"+
    "\1\u011a\30\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\13\5\1\u011b\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\11\5"+
    "\1\u011c\23\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\4\5\1\u011d\30\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\4\5"+
    "\1\u011e\30\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\11\5\1\u011f\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\22\5"+
    "\1\u0120\12\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\16\5\1\u0121\16\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\2\5"+
    "\1\u0122\32\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\11\5\1\u0123\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\2\5"+
    "\1\u0124\32\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\22\5\1\u0125\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\12\5"+
    "\1\u0126\22\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\22\5\1\u0127\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\20\5"+
    "\1\u0128\14\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\22\5\1\u0129\12\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\11\5"+
    "\1\u012a\23\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\13\5\1\u012b\21\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\1\5"+
    "\1\u012c\33\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\15\5\1\u012d\11\5\1\u012e\3\5"+
    "\1\u012f\1\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\15\5\1\u0130\11\5\1\u0131\3\5"+
    "\1\u0132\1\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\15\5\1\u0133\11\5\1\u0134\3\5"+
    "\1\u0135\1\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\16\5\1\225\16\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\13\5"+
    "\1\u0136\21\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\7\5\1\u0137\25\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\10\5"+
    "\1\u0138\24\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\25\5\1\u0139\7\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\3\5"+
    "\1\u013a\31\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\20\5\1\u013b\14\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\11\5"+
    "\1\u013c\23\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\11\5\1\u013d\23\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\2\5"+
    "\1\u013e\32\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\1\5\1\u013f\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\1\5"+
    "\1\u0140\33\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\4\5\1\u0141\30\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\13\5"+
    "\1\u0142\21\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\20\5\1\u0143\14\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\6\5"+
    "\1\u0144\26\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\5\5\1\u0145\27\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\34\5"+
    "\1\u0146\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\6\5\1\u0147\26\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\3\5\1\u0148"+
    "\31\5\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\10\5\1\u0149\24\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\16\5\1\u014a"+
    "\16\5\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\21\5\1\u014b\13\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\10\5\1\u014c"+
    "\24\5\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\11\5\1\u014d\23\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\2\5\1\u014e"+
    "\32\5\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\22\5\1\u014f\12\5\2\0\2\5\23\0"+
    "\4\5\3\0\3\5\1\0\1\5\3\0\7\5\1\u0150"+
    "\25\5\2\0\2\5\23\0\4\5\3\0\3\5\1\0"+
    "\1\5\3\0\2\5\1\u0151\10\5\1\u0152\21\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\5\5\1\u0153\27\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\14\5\1\u0154\20\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\11\5\1\u0155\23\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\11\5\1\u0156\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\3\5\1\u0157\31\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\2\5\1\u0158\32\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\13\5\1\u0159\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\11\5\1\u015a\23\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\7\5\1\u015b\25\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\13\5\1\u015c\21\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\13\5\1\u015d\21\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\7\5\1\u015e\25\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\3\5\1\u015f\31\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\23\5\1\u0160\3\5\1\u0161"+
    "\3\5\1\u0162\1\5\2\0\1\u0163\1\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\2\5\1\u0164\32\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\1\5\1\u0165\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\32\5\1\u0166\2\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\7\5\1\u0167\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\5\5\1\u0168\27\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\1\5\1\u0169\33\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\7\5\1\u016a\25\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\13\5\1\u016b\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\14\5\1\u016c\20\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\10\5\1\u016d\24\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\30\5\1\u016e\4\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\30\5\1\u016f\4\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\30\5\1\u0170\4\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\11\5\1\u0171\23\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\11\5\1\u0172\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\32\5\1\u0173\2\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\11\5\1\u0174\23\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\7\5\1\u0175\25\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\12\5\1\u0176\22\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\24\5\1\u0177\10\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\24\5\1\u0178\10\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\13\5\1\u0179\21\5\2\0\2\5\23\0\4\5"+
    "\2\0\1\u017a\3\5\1\0\1\5\3\0\35\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\2\5\1\u017b\32\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\13\5\1\u017c\21\5\2\0"+
    "\2\5\23\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\25\5\1\u017d\7\5\2\0\2\5\23\0\4\5\3\0"+
    "\3\5\1\0\1\5\3\0\25\5\1\u017e\7\5\2\0"+
    "\2\5\31\0\1\u017a\15\0\1\u017f\10\0\1\u0180\6\0"+
    "\1\u0181\36\0\4\5\3\0\3\5\1\0\1\5\3\0"+
    "\1\u0182\34\5\2\0\2\5\23\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\6\5\1\u0183\26\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\6\5"+
    "\1\u0184\26\5\2\0\2\5\43\0\1\u0185\114\0\1\u0186"+
    "\71\0\1\u0187\61\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\13\5\1\u0188\21\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\3\5\1\u0189\31\5"+
    "\2\0\2\5\23\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\3\5\1\u018a\31\5\2\0\2\5\70\0\1\u018b"+
    "\57\0\1\u018c\133\0\1\u018d\27\0\4\5\3\0\3\5"+
    "\1\0\1\5\3\0\1\5\1\u018e\33\5\2\0\2\5"+
    "\23\0\4\5\3\0\3\5\1\0\1\5\3\0\1\5"+
    "\1\u018f\33\5\2\0\2\5\63\0\1\u0190\63\0\1\u0191"+
    "\125\0\1\u018b\36\0\4\5\3\0\3\5\1\0\1\5"+
    "\3\0\26\5\1\u0192\6\5\2\0\2\5\23\0\4\5"+
    "\3\0\3\5\1\0\1\5\3\0\26\5\1\u0193\6\5"+
    "\2\0\2\5\31\0\1\u0194\123\0\1\u0195\61\0\1\u0194"+
    "\10\0\1\u0196\1\0\1\u0197\1\0\1\u0198\3\0\1\u0199"+
    "\1\0\1\u019a\3\0\1\u019b\1\0\1\u019c\100\0\1\u018b"+
    "\65\0\1\u019d\11\0\1\u019e\67\0\1\u019f\10\0\1\u01a0"+
    "\6\0\1\u01a1\67\0\1\u01a2\75\0\1\u019f\1\0\1\u01a3"+
    "\15\0\1\u01a1\62\0\1\u019f\1\u01a4\107\0\1\u01a5\102\0"+
    "\1\u01a6\76\0\1\u01a7\114\0\1\u01a8\101\0\1\u019e\76\0"+
    "\1\u01a9\101\0\1\u01aa\75\0\1\u01ab\112\0\1\u01a0\72\0"+
    "\1\u01ac\110\0\1\u01ad\111\0\1\u01ae\67\0\1\u01a9\114\0"+
    "\1\u01a9\11\0\1\u01a9\3\0\1\u01a9\110\0\1\u01af\57\0"+
    "\1\u01b0\72\0\1\u01a0\101\0\1\u01a9\112\0\1\u01b1\11\0"+
    "\1\u01b1\3\0\1\u01b1\70\0\1\u01b2\102\0\1\u01b3\100\0"+
    "\1\u01a8\21\0\1\u01af\46\0\1\u01b4\102\0\1\u01b5\110\0"+
    "\1\u01b6\102\0\1\u01b7\111\0\1\u01b8\102\0\1\u01b9\103\0"+
    "\1\u01ba\3\0\1\u01bb\3\0\1\u01bc\72\0\1\u01bd\3\0"+
    "\1\u01be\3\0\1\u01bc\57\0\1\u01bf\122\0\1\u01c0\102\0"+
    "\1\u01a9\62\0\1\u01c1\122\0\1\u01c2\64\0\1\u01c3\114\0"+
    "\1\u01c4\4\0\1\u01c5\7\0\1\u01af\53\0\1\u01c6\121\0"+
    "\1\u01c7\7\0\1\u01af\54\0\1\u01c8\114\0\1\u01c9\77\0"+
    "\1\u01ca\73\0\1\u01a9\111\0\1\u01cb\104\0\1\u01c4\14\0"+
    "\1\u01af\47\0\1\u01cc\116\0\1\u01cd\102\0\1\u01ce\63\0"+
    "\1\u01cf\105\0\1\u01d0\102\0\1\u01d1\75\0\1\u01d2\133\0"+
    "\1\u01c8\102\0\1\u01a9\76\0\1\u01a9\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24455];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\34\1\10\11\10\1\3\11\1\1\1\11"+
    "\11\1\1\11\5\1\2\11\2\1\2\11\46\1\12\11"+
    "\12\1\1\11\1\1\1\0\66\1\1\11\274\1\1\0"+
    "\4\1\3\0\3\1\3\0\3\1\3\0\2\1\2\0"+
    "\2\1\33\0\1\11\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return IDENTIFIER;
          }
        case 124: break;
        case 113: 
          { return SAMPLER2D_TYPE;
          }
        case 125: break;
        case 65: 
          { return IVEC4_TYPE;
          }
        case 126: break;
        case 99: 
          { return VARYING_KEYWORD;
          }
        case 127: break;
        case 105: 
          { return VOLATILE_KEYWORD;
          }
        case 128: break;
        case 27: 
          { return DEC_OP;
          }
        case 129: break;
        case 34: 
          { return IN_KEYWORD;
          }
        case 130: break;
        case 30: 
          { return COMMENT_BLOCK;
          }
        case 131: break;
        case 110: 
          { return RESTRICT_KEYWORD;
          }
        case 132: break;
        case 22: 
          { return QUESTION;
          }
        case 133: break;
        case 17: 
          { return EQUAL;
          }
        case 134: break;
        case 80: 
          { return PREPROCESSOR_ERROR;
          }
        case 135: break;
        case 51: 
          { return VEC4_TYPE;
          }
        case 136: break;
        case 93: 
          { return SMOOTH_KEYWORD;
          }
        case 137: break;
        case 90: 
          { return MAT3X3_TYPE;
          }
        case 138: break;
        case 19: 
          { return LEFT_ANGLE;
          }
        case 139: break;
        case 62: 
          { return PREPROCESSOR_LINE;
          }
        case 140: break;
        case 78: 
          { return PREPROCESSOR_UNDEF;
          }
        case 141: break;
        case 23: 
          { return COLON;
          }
        case 142: break;
        case 67: 
          { return IVEC3_TYPE;
          }
        case 143: break;
        case 108: 
          { return CENTROID_KEYWORD;
          }
        case 144: break;
        case 47: 
          { return OUT_KEYWORD;
          }
        case 145: break;
        case 100: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 146: break;
        case 107: 
          { return COHERENT_KEYWORD;
          }
        case 147: break;
        case 97: 
          { return PREPROCESSOR_DEFINE;
          }
        case 148: break;
        case 89: 
          { return MAT3X2_TYPE;
          }
        case 149: break;
        case 74: 
          { return CONST_KEYWORD;
          }
        case 150: break;
        case 46: 
          { return PREPROCESSOR_CONCAT;
          }
        case 151: break;
        case 70: 
          { return BVEC4_TYPE;
          }
        case 152: break;
        case 6: 
          { return DASH;
          }
        case 153: break;
        case 44: 
          { return XOR_OP;
          }
        case 154: break;
        case 36: 
          { return EQ_OP;
          }
        case 155: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 156: break;
        case 25: 
          { yybegin(YYINITIAL); return PREPROCESSOR_END;
          }
        case 157: break;
        case 103: 
          { return PREPROCESSOR_VERSION;
          }
        case 158: break;
        case 106: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 159: break;
        case 14: 
          { return RIGHT_BRACKET;
          }
        case 160: break;
        case 12: 
          { return RIGHT_BRACE;
          }
        case 161: break;
        case 10: 
          { return SEMICOLON;
          }
        case 162: break;
        case 73: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 163: break;
        case 82: 
          { return MAT4X4_TYPE;
          }
        case 164: break;
        case 24: 
          { return COMMA;
          }
        case 165: break;
        case 53: 
          { return VEC3_TYPE;
          }
        case 166: break;
        case 112: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 167: break;
        case 117: 
          { return PREPROCESSOR_EXTENSION;
          }
        case 168: break;
        case 37: 
          { return ADD_ASSIGN;
          }
        case 169: break;
        case 85: 
          { return MAT2X4_TYPE;
          }
        case 170: break;
        case 64: 
          { return PREPROCESSOR_ELSE;
          }
        case 171: break;
        case 92: 
          { return STRUCT;
          }
        case 172: break;
        case 59: 
          { return MAT4_TYPE;
          }
        case 173: break;
        case 66: 
          { return IVEC2_TYPE;
          }
        case 174: break;
        case 18: 
          { return PLUS;
          }
        case 175: break;
        case 26: 
          { return FLOAT_CONSTANT;
          }
        case 176: break;
        case 114: 
          { return SAMPLER3D_TYPE;
          }
        case 177: break;
        case 52: 
          { return VEC2_TYPE;
          }
        case 178: break;
        case 119: 
          { return SAMPLERCUBE_TYPE;
          }
        case 179: break;
        case 72: 
          { return BVEC3_TYPE;
          }
        case 180: break;
        case 45: 
          { return PREPROCESSOR_IF;
          }
        case 181: break;
        case 111: 
          { return INVARIANT_KEYWORD;
          }
        case 182: break;
        case 5: 
          { return DOT;
          }
        case 183: break;
        case 63: 
          { return PREPROCESSOR_ELIF;
          }
        case 184: break;
        case 28: 
          { return SUB_ASSIGN;
          }
        case 185: break;
        case 57: 
          { return BOOL_TYPE;
          }
        case 186: break;
        case 69: 
          { return FLOAT_TYPE;
          }
        case 187: break;
        case 81: 
          { return BUFFER_KEYWORD;
          }
        case 188: break;
        case 49: 
          { return FOR_KEYWORD;
          }
        case 189: break;
        case 38: 
          { return INC_OP;
          }
        case 190: break;
        case 115: 
          { return SAMPLER1D_TYPE;
          }
        case 191: break;
        case 84: 
          { return MAT4X3_TYPE;
          }
        case 192: break;
        case 56: 
          { return BOOL_CONSTANT;
          }
        case 193: break;
        case 1: 
          { return UNKNOWN;
          }
        case 194: break;
        case 87: 
          { return MAT2X3_TYPE;
          }
        case 195: break;
        case 39: 
          { return LE_OP;
          }
        case 196: break;
        case 31: 
          { return DIV_ASSIGN;
          }
        case 197: break;
        case 35: 
          { return DO_KEYWORD;
          }
        case 198: break;
        case 79: 
          { return PREPROCESSOR_ENDIF;
          }
        case 199: break;
        case 71: 
          { return BVEC2_TYPE;
          }
        case 200: break;
        case 58: 
          { return ELSE_KEYWORD;
          }
        case 201: break;
        case 43: 
          { return OR_OP;
          }
        case 202: break;
        case 16: 
          { return RIGHT_PAREN;
          }
        case 203: break;
        case 11: 
          { return LEFT_BRACE;
          }
        case 204: break;
        case 61: 
          { return MAT3_TYPE;
          }
        case 205: break;
        case 98: 
          { return PREPROCESSOR_PRAGMA;
          }
        case 206: break;
        case 101: 
          { return UNIFORM_KEYWORD;
          }
        case 207: break;
        case 121: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 208: break;
        case 83: 
          { return MAT4X2_TYPE;
          }
        case 209: break;
        case 116: 
          { return WRITEONLY_KEYWORD;
          }
        case 210: break;
        case 50: 
          { return VOID_TYPE;
          }
        case 211: break;
        case 123: 
          { return PRECISION_STATEMENT;
          }
        case 212: break;
        case 86: 
          { return MAT2X2_TYPE;
          }
        case 213: break;
        case 102: 
          { return PRECISE_KEYWORD;
          }
        case 214: break;
        case 55: 
          { return PRECISION_KEYWORD;
          }
        case 215: break;
        case 29: 
          { return COMMENT_LINE;
          }
        case 216: break;
        case 60: 
          { return MAT2_TYPE;
          }
        case 217: break;
        case 42: 
          { return AND_OP;
          }
        case 218: break;
        case 20: 
          { return RIGHT_ANGLE;
          }
        case 219: break;
        case 7: 
          { return SLASH;
          }
        case 220: break;
        case 9: 
          { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
          }
        case 221: break;
        case 33: 
          { return IF_KEYWORD;
          }
        case 222: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 223: break;
        case 68: 
          { return INOUT_KEYWORD;
          }
        case 224: break;
        case 32: 
          { return MUL_ASSIGN;
          }
        case 225: break;
        case 76: 
          { return WHILE_KEYWORD;
          }
        case 226: break;
        case 120: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 227: break;
        case 40: 
          { return GE_OP;
          }
        case 228: break;
        case 109: 
          { return READONLY_KEYWORD;
          }
        case 229: break;
        case 15: 
          { return LEFT_PAREN;
          }
        case 230: break;
        case 88: 
          { return MAT3X4_TYPE;
          }
        case 231: break;
        case 8: 
          { return STAR;
          }
        case 232: break;
        case 77: 
          { return PREPROCESSOR_IFDEF;
          }
        case 233: break;
        case 75: 
          { return PATCH_KEYWORD;
          }
        case 234: break;
        case 94: 
          { return SHARED_KEYWORD;
          }
        case 235: break;
        case 91: 
          { return SAMPLE_KEYWORD;
          }
        case 236: break;
        case 122: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 237: break;
        case 54: 
          { return FLAT_KEYWORD;
          }
        case 238: break;
        case 41: 
          { return NE_OP;
          }
        case 239: break;
        case 21: 
          { return BANG;
          }
        case 240: break;
        case 13: 
          { return LEFT_BRACKET;
          }
        case 241: break;
        case 104: 
          { return PREPROCESSOR_DEFINED;
          }
        case 242: break;
        case 96: 
          { return PREPROCESSOR_IFNDEF;
          }
        case 243: break;
        case 118: 
          { return SUBROUTINE_KEYWORD;
          }
        case 244: break;
        case 95: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 245: break;
        case 48: 
          { return INT_TYPE;
          }
        case 246: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
